
#include "doctest.h"
#include <memetico/data/data_set.h>
#include <sstream>
#include <fstream>

TEST_CASE("DataSet: ") {

    // Tests
    // 1. Create DataSet given file
    string file_name = "test_data.csv";
    DataSet ds = DataSet(file_name);
    REQUIRE(ds.get_file() == file_name);

}

TEST_CASE("load() ") {

    // Tests
    // 1. Load dataset that doesnt exist
    // 2. Load basic datset
    // 3. Load dataset with uncertainty, weights etc.
    // Todo
    // Special character issues in file and filename
    // Load dataset missing y
    // Load dataset missing varaibles

    // 1. Load dataset that doesnt exist
    string fn1("Non-existing-file.csv");
    DataSet ds1 = DataSet(fn1);
    try {
        ds1.load();
    } catch (const exception& ex) {
        stringstream ss; 
        ss << ex.what();
        REQUIRE(ss.str() == "Unable to open file "+ fn1);
        // Weird -- need to reset errno else some other test in a random part of the application
        // throws an error with "No such file or directory"
        errno = 0;
    }

    // 2. Load basic datset
    string fn2("test_data.csv");
    ofstream f;
    f.open(fn2);
    if (!f.is_open())
        throw runtime_error("Unable to open file "+ fn2);
    f << "y,x1,x2,x3,x4,x5,x6" << endl;
    f << "5,10.4,335,123,356,12.4,16.2" << endl;
    f << "6,11.4,336,124,357,12.5,16.3" << endl;
    f.close();
    DataSet ds = DataSet(fn2);
    //
    ds.load();
    // 2.1 Check basic values
    REQUIRE( ds.get_file() == "test_data.csv" );
    REQUIRE( !ds.has_uncertainty() );
    REQUIRE( !ds.has_weight() );
    REQUIRE( !ds.has_derivative() );
    REQUIRE( ds.get_count() == 2 );
    REQUIRE( ds.weight.size() == 0 );
    REQUIRE( ds.dy.size() == 0 );
    REQUIRE( ds.y.size() == 2 );
    REQUIRE( ds.y[0] == 5 );
    REQUIRE( ds.samples.size() == 2 );
    REQUIRE( ds.samples[0].size() == 6 );
    // 2.2 Check saved samples
    REQUIRE( float(ds.samples[0][0]) == float(10.4) );
    REQUIRE( float(ds.samples[0][1]) == float(335) );
    REQUIRE( float(ds.samples[0][2]) == float(123) );
    REQUIRE( float(ds.samples[0][3]) == float(356) );
    REQUIRE( float(ds.samples[0][4]) == float(12.4) );
    REQUIRE( float(ds.samples[0][5]) == float(16.2) );
    REQUIRE( float(ds.samples[1][0]) == float(11.4) );
    REQUIRE( float(ds.samples[1][1]) == float(336) );
    REQUIRE( float(ds.samples[1][2]) == float(124) );
    REQUIRE( float(ds.samples[1][3]) == float(357) );
    REQUIRE( float(ds.samples[1][4]) == float(12.5) );
    REQUIRE( float(ds.samples[1][5]) == float(16.3) );
    // 2.3 Check varaibles 
    REQUIRE( DataSet::IVS.size() == 6 );
    REQUIRE( DataSet::IVS[0] == "x1" );
    REQUIRE( DataSet::IVS[1] == "x2" );
    REQUIRE( DataSet::IVS[2] == "x3" );
    REQUIRE( DataSet::IVS[3] == "x4" );
    REQUIRE( DataSet::IVS[4] == "x5" );
    REQUIRE( DataSet::IVS[5] == "x6" );
    
    // 3. Load dataset with uncertainty, weights etc.
    string fn3("test_data.csv");
    ofstream f3;
    f3.open(fn3);
    if (!f3.is_open())
        throw runtime_error("Unable to open file "+ fn3);
    f3 << "y,yd,ydd,yddd,x1,x2,x3,x4,x5,x6,dy,w" << endl;
    f3 << "5,8,5,7,10.4,335,123,356,12.4,16.2,0.1,1.1" << endl;
    f3 << "6,6,2,6,11.4,336,124,357,12.5,16.3,0.2,1.2" << endl;
    f3 << "7,5,8,4,12.4,337,125,358,12.6,16.4,0.3,1.3" << endl;
    f3 << "8,4,8,9,13.4,338,126,359,12.7,16.5,0.4,1.4" << endl;
    f3.close();
    DataSet ds3 = DataSet(fn3);
    //
    ds3.load();
    // 3.1 Check basic values
    REQUIRE( ds3.get_file() == "test_data.csv" );
    REQUIRE( ds3.has_uncertainty() );
    REQUIRE( ds3.has_weight() );
    REQUIRE( ds3.has_derivative() );
    REQUIRE( ds3.get_count() == 4 );
    // 0th Derviative
    REQUIRE( ds3.Yder[0].size() == 4 );
    REQUIRE( float(ds3.Yder[0][0]) == float(8));
    REQUIRE( float(ds3.Yder[0][1]) == float(6));
    REQUIRE( float(ds3.Yder[0][2]) == float(5));
    REQUIRE( float(ds3.Yder[0][3]) == float(4));
    // 1st Derviative
    REQUIRE( ds3.Yder[1].size() == 4 );
    REQUIRE( float(ds3.Yder[1][0]) == float(5));
    REQUIRE( float(ds3.Yder[1][1]) == float(2));
    REQUIRE( float(ds3.Yder[1][2]) == float(8));
    REQUIRE( float(ds3.Yder[1][3]) == float(8));
    // 2nd Derviative
    REQUIRE( ds3.Yder[2].size() == 4 );
    REQUIRE( float(ds3.Yder[2][0]) == float(7));
    REQUIRE( float(ds3.Yder[2][1]) == float(6));
    REQUIRE( float(ds3.Yder[2][2]) == float(4));
    REQUIRE( float(ds3.Yder[2][3]) == float(9));
    // Weight
    REQUIRE( ds3.weight.size() == 4 );
    REQUIRE( float(ds3.weight[0]) == float(1.1));
    REQUIRE( float(ds3.weight[1]) == float(1.2));
    REQUIRE( float(ds3.weight[2]) == float(1.3));
    REQUIRE( float(ds3.weight[3]) == float(1.4));
    // Uncertainty
    REQUIRE( ds3.dy.size() == 4 );
    REQUIRE( float(ds3.dy[0]) == float(0.1));
    REQUIRE( float(ds3.dy[1]) == float(0.2));
    REQUIRE( float(ds3.dy[2]) == float(0.3));
    REQUIRE( float(ds3.dy[3]) == float(0.4));
    // 3.1 Check target
    REQUIRE( ds3.y.size() == 4 );
    REQUIRE( float(ds3.y[0]) == float(5));
    REQUIRE( float(ds3.y[1]) == float(6));
    REQUIRE( float(ds3.y[2]) == float(7));
    REQUIRE( float(ds3.y[3]) == float(8));
    // 3.2 Check saved samples
    REQUIRE( ds3.samples.size() == 4 );
    REQUIRE( ds3.samples[0].size() == 6 );
    REQUIRE( float(ds3.samples[0][0]) == float(10.4) );
    REQUIRE( float(ds3.samples[0][1]) == float(335) );
    REQUIRE( float(ds3.samples[0][2]) == float(123) );
    REQUIRE( float(ds3.samples[0][3]) == float(356) );
    REQUIRE( float(ds3.samples[0][4]) == float(12.4) );
    REQUIRE( float(ds3.samples[0][5]) == float(16.2) );
    REQUIRE( float(ds3.samples[1][0]) == float(11.4) );
    REQUIRE( float(ds3.samples[1][1]) == float(336) );
    REQUIRE( float(ds3.samples[1][2]) == float(124) );
    REQUIRE( float(ds3.samples[1][3]) == float(357) );
    REQUIRE( float(ds3.samples[1][4]) == float(12.5) );
    REQUIRE( float(ds3.samples[1][5]) == float(16.3) );
    REQUIRE( float(ds3.samples[2][0]) == float(12.4) );
    REQUIRE( float(ds3.samples[2][1]) == float(337) );
    REQUIRE( float(ds3.samples[2][2]) == float(125) );
    REQUIRE( float(ds3.samples[2][3]) == float(358) );
    REQUIRE( float(ds3.samples[2][4]) == float(12.6) );
    REQUIRE( float(ds3.samples[2][5]) == float(16.4) );
    REQUIRE( float(ds3.samples[3][0]) == float(13.4) );
    REQUIRE( float(ds3.samples[3][1]) == float(338) );
    REQUIRE( float(ds3.samples[3][2]) == float(126) );
    REQUIRE( float(ds3.samples[3][3]) == float(359) );
    REQUIRE( float(ds3.samples[3][4]) == float(12.7) );
    REQUIRE( float(ds3.samples[3][5]) == float(16.5) );
    REQUIRE( DataSet::IVS.size() == 6 );
    REQUIRE( DataSet::IVS[0] == "x1" );
    REQUIRE( DataSet::IVS[1] == "x2" );
    REQUIRE( DataSet::IVS[2] == "x3" );
    REQUIRE( DataSet::IVS[3] == "x4" );
    REQUIRE( DataSet::IVS[4] == "x5" );
    REQUIRE( DataSet::IVS[5] == "x6" );

}

TEST_CASE(" normalise() ") {

    // Load data with known derivative
    string fn("test_data.csv");
    ofstream f;
    f.open(fn);
    if (!f.is_open())
        throw runtime_error("Unable to open file "+ fn);

    // Write the header
    f << "y,x,yd,ydd,yddd" << endl;
    // In excel, we can use the following to build the string =CONCAT("f << """, A2,",",B2,",",C2,",",D2,",",E2, """ << endl;")
    f << "3.5779985988974,-0.976908981345251,-0.84659689813977,102.198510798502,-380.934495728811" << endl;
    f << "3.5744740824253,-0.969148927003456,-0.066196622253277,98.7825398776912,-498.141776467768" << endl;
    f << "3.66255853785587,-0.923923424750924,3.69848861082895,64.2165472698516,-957.347207270611" << endl;
    f << "3.67423578346107,-0.920847025073935,3.89149066763942,61.248812032798,-971.625972053372" << endl;
    f << "3.69091955233745,-0.916692607242046,4.13751108578498,57.178330979337,-987.270976361419" << endl;
    f << "3.82373490789497,-0.889027194136539,5.33575329763218,29.4354632764644,-990.072983930931" << endl;
    f << "4.089846246331,-0.842193654338596,5.71024766614384,-11.1130765680727,-697.016939466085" << endl;
    f << "4.16293436879655,-0.829186593079273,5.50991219836211,-19.4439772949013,-583.157728705626" << endl;
    f << "4.28572856226068,-0.80572152129487,4.912262330062,-30.6859856923646,-376.626296640075" << endl;
    f << "4.4118800915332,-0.777262017601174,3.91773331395273,-38.1599484483296,-156.775510722092" << endl;
    f << "4.49894703594448,-0.751799162121505,2.91261552213449,-40.1590926623421,-8.67685557345618" << endl;
    f << "4.60208817774286,-0.693533417307138,0.680830222436794,-34.9125272537386,151.299098168267" << endl;
    f << "4.60530620418078,-0.6577630452412,-0.466611985796209,-29.1881530808044,161.057453552093" << endl;
    f << "4.54678402730559,-0.606661846067897,-1.76059451328056,-21.7949108272171,122.077308035906" << endl;
    f << "4.50584176052727,-0.585961502778545,-2.18719796156207,-19.5009197415822,99.2668754149997" << endl;
    f << "4.41615458802327,-0.550313750771967,-2.8279931175868,-16.6965273969846,57.9279794125431" << endl;
    f << "4.36171509419283,-0.532031287123978,-3.12475029417214,-15.8317466352207,36.6999885841963" << endl;
    f << "4.31855928305068,-0.518668497696744,-3.333489263484,-15.444404957671,21.2870043754433" << endl;
    f << "4.19345052978551,-0.483912276075844,-3.86545662988452,-15.3979564944258,-18.6086156943461" << endl;
    f << "4.16591692778392,-0.476887872970988,-3.97414362176646,-15.5570531380264,-26.6928937029467" << endl;
    f << "4.00289452989895,-0.438794704893315,-4.59678640048956,-17.4143158389072,-70.9159224174217" << endl;
    f << "3.97349407991919,-0.432475147934399,-4.70830227291854,-17.8857472901093,-78.279503960007" << endl;
    f << "3.74218191762642,-0.387485236755882,-5.60962732883914,-22.5598103104708,-128.413410984917" << endl;
    f << "3.68168885489813,-0.376930050154756,-5.85509787318969,-23.9699857399523,-138.617976448303" << endl;
    f << "3.31569518987312,-0.32144766812631,-7.41855348075094,-32.6121872352529,-161.394061118842" << endl;
    f << "3.17725647996686,-0.303514063827696,-8.02885450785697,-35.4116370851457,-148.462713791342" << endl;
    f << "2.94620433825848,-0.276413371582682,-9.03809820884115,-38.8391650611293,-97.2732011035598" << endl;
    f << "2.76963492116935,-0.257644314163112,-9.78084182617149,-40.1074285864942,-33.6217555330013" << endl;
    f << "2.64659581116728,-0.245374049466792,-10.2741714732946,-40.1887819110067,22.31777436336" << endl;
    f << "1.9482522506765,-0.184282210854747,-12.4518944401306,-26.5817902492202,463.059840169585" << endl;
    f << "1.65114679206734,-0.160916761564189,-12.9277040775496,-13.3378705187714,669.98919629096" << endl;
    f << "1.18170105374393,-0.124824364030686,-12.9091272906545,15.965952897748,933.240693371422" << endl;
    f << "1.06781057321187,-0.115944590259083,-12.7299902120822,24.4406736711232,973.348950565515" << endl;
    f << "0.906008891222665,-0.103046987893211,-12.3326760062058,37.2403375442781,1006.03638667734" << endl;
    f << "0.791051499652717,-0.0935787053174586,-11.9348760855023,46.7907095812802,1008.00838101071" << endl;
    f << "0.661413434271623,-0.0824547131294182,-11.3523522282848,57.8979050729595,984.108949307779" << endl;
    f << "0.468912678003718,-0.0646047561879912,-10.1664116002032,74.6818385083388,883.596972782418" << endl;
    f << "0.448657310144153,-0.0625974590212788,-10.0147334931953,76.439485426722,867.501816448262" << endl;
    f << "0.301279517696837,-0.0468855171793256,-8.71256345849655,88.9028513624401,709.87270356924" << endl;
    f << "0.0764013078899314,0.0157911986362662,5.67091590039564,104.416490771198,-264.059961534296" << endl;
    f << "0.302469303664115,0.0470219820062949,8.72468895590559,88.8058695987122,-711.471137356482" << endl;
    f << "0.514788467225795,0.0690460728070796,10.4892729342342,70.6842419089335,-915.801880892209" << endl;
    f << "0.576041368797739,0.0747777262540694,10.8791676331259,65.3324071764651,-950.338049458613" << endl;
    f << "0.801584151504194,0.0944597038442665,11.9757073535784,45.902352154531,-1008.66793544248" << endl;
    f << "1.01131941732619,0.111486736514683,12.6113132948914,28.814407162849,-988.298435902323" << endl;
    f << "1.78170870880839,0.171078178897851,12.7591115929524,-19.6933764747571,-580.510698168963" << endl;
    f << "2.01832591352253,0.189945085368035,12.294206214335,-29.0634000159769,-413.536089704494" << endl;
    f << "2.21510186985684,0.206288811455618,11.7701573967522,-34.6945848068096,-277.651358207407" << endl;
    f << "2.69783952002582,0.250411334593573,10.0715512144834,-40.2389439014152,2.06880983930634" << endl;
    f << "3.77708126936715,0.393785440500935,5.47000179001202,-21.7711691915784,121.895515245991" << endl;
    f << "3.84217185271994,0.405974097897088,5.21337147820434,-20.3654535042625,108.645176345156" << endl;
    f << "4.10515419405547,0.462034438643417,4.20879417105232,-16.0809114427439,43.862493282991" << endl;
    f << "4.10971191551194,0.463119590368436,4.19136952054175,-16.0339966756938,42.6043479038701" << endl;
    f << "4.19374016106317,0.48398721534971,3.86430277037719,-15.3965652061708,18.5224691179283" << endl;
    f << "4.22258728335691,0.491566371303712,3.74805842934082,-15.2891755247542,9.81822493632518" << endl;
    f << "4.40163201152561,0.545253611780536,2.91176339062732,-16.4183106806287,-52.0376335321454" << endl;
    f << "4.51810953244601,0.591719680623202,2.07322641605038,-20.0913046965608,-105.777061914026" << endl;
    f << "4.60874843856141,0.676494724521009,-0.108582952169211,-32.2283080597495,-161.738342931552" << endl;
    f << "4.60556698673541,0.68749803026681,-0.47290878816836,-33.9831110294496,-156.412132385966" << endl;
    f << "4.58984321054962,0.706871577140042,-1.15950175861728,-36.8229580510482,-133.609923136567" << endl;
    f << "4.47566355661086,0.759395782670583,-3.21707566709985,-39.94843053838,47.5448857354185" << endl;
    f << "4.137937541056,0.833689161519814,-5.59141364396234,-16.7282605555855,623.082706126629" << endl;
    f << "4.06795019160942,0.846015111719803,-5.74754749172586,-8.38766392362975,729.226481442513" << endl;
    f << "3.86118478125898,0.88212966363449,-5.51540651175804,22.6841884796176,966.068347744925" << endl;
    f << "3.84173438767475,0.885683507823483,-5.42866030480415,26.1420212666358,979.523868305897" << endl;
    f << "3.71136951730625,0.911904088009247,-4.39993709932731,52.417710708948,1000.16589924583" << endl;
    f << "3.66382801608767,0.92358119735608,-3.72040917708884,63.8886247794099,959.049223362592" << endl;
    f << "3.87778163924129,1.0449831458812,7.82358327698808,90.3755576403501,-687.227830850747" << endl;
    f << "4.13775631409942,1.07380526587664,10.1007332308871,66.3969061161282,-945.068086280396" << endl;
    f << "4.31876937084382,1.09085004307293,11.0914295334206,49.6796889215656,-1004.86316962461" << endl;
    f << "4.41495004150881,1.0993685075258,11.4780637901204,41.0897922530504,-1009.17262489811" << endl;
    f << "4.6807194194744,1.12178727264116,12.1486799622683,18.9652305400009,-948.446435462095" << endl;
    f << "4.94076950528479,1.14296272627977,12.346408358231,0.177843294821222,-816.394744514316" << endl;
    f << "4.98552094498343,1.1465878047206,12.3417488816327,-2.73179616076299,-788.694927127467" << endl;
    f << "5.34018429233882,1.17566018389698,11.9628796473273,-22.1197031922992,-539.683687313521" << endl;
    f << "5.75216507131031,1.21158951655157,10.8875116049814,-35.9178834085914,-236.674781097529" << endl;
    f << "5.92149805852631,1.22757705294165,10.2879973859885,-38.7807990278552,-124.50476894601" << endl;
    f << "6.37429912004083,1.27613716078293,8.36271116988949,-38.728705009314,96.4900163587773" << endl;
    f << "6.53051592630377,1.29568605898916,7.62706609006378,-36.3983644028355,137.998770768416" << endl;
    f << "6.65638414848365,1.31287819045099,7.02280857347798,-33.8421899349947,156.93911404326" << endl;
    f << "6.66898435932855,1.31468017647391,6.96208088152284,-33.5583018892835,158.121207274022" << endl;
    f << "7.09460810269681,1.38695679299381,4.95048813249449,-22.4935949680439,128.920381702128" << endl;
    f << "7.17184579819227,1.40313571849982,4.60270745671554,-20.544520538221,111.764939736616" << endl;
    f << "7.18947870784785,1.40699979666044,4.52414556776652,-20.120924117686,107.473921126525" << endl;
    f << "7.45949914587949,1.47628535664651,3.32432598150143,-15.4415060400468,27.3609042007943" << endl;
    f << "7.6373284318581,1.53871581427661,2.36702870368854,-15.9727323683232,-44.4691814587668" << endl;
    f << "7.72441871979264,1.58222842353253,1.61393924951804,-19.0092257088344,-95.0272422862804" << endl;
    f << "7.78247423404899,1.66312066241141,-0.327103705577505,-29.9277876929808,-162.355033094752" << endl;
    f << "7.77936529695484,1.67026194822142,-0.544973242414788,-31.0895951523097,-162.762864175309" << endl;
    f << "7.77859058506271,1.6716299961237,-0.587657579618167,-31.3121974955939,-162.657440631114" << endl;
    f << "7.76176621204807,1.6904830763928,-1.20659609345089,-34.3203334442766,-154.116757374445" << endl;
    f << "7.74490501363322,1.70240163005216,-1.62631297607294,-36.0837172208712,-140.61048493674" << endl;
    f << "7.66853039442702,1.73619749140369,-2.91367142930697,-39.6323190366537,-57.0715518975328" << endl;
    f << "7.45812365389526,1.7892697170719,-4.98181844997095,-35.6431104328852,243.439846492017" << endl;
    f << "7.44479544837818,1.79192011222158,-5.07540795516513,-34.9709234738154,263.868376629003" << endl;
    f << "7.11803957964037,1.84773645484656,-6.37289706801967,-6.99773637501022,743.437891356334" << endl;
    f << "6.93959153945441,1.87576570883048,-6.24897029282644,16.7481590093378,936.568300338183" << endl;
    f << "6.66134126727409,1.92749363654414,-4.06547437117131,67.7211387195838,937.870694842906" << endl;
    f << "6.55983838130922,1.97249757494534,-0.19723158852848,100.487422171066,448.519141065872" << endl;
    f << "6.57210111500203,1.98998950891102,1.61522219816047,105.929208438714,168.883112960017" << endl;

    f.close();
    DataSet ds = DataSet(fn);
    ds.load();

    // 1. Finite difference test

    // Define results from finite difference mode
    // See https://github.com/impvau/fornberg-test for python implementation generating this
    vector<vector<double>> fb = {
        { -0.454187174470632, 90.6609129977114, -756.607876290101 },
        { -0.102420384194852, 100.109797346231, -561.324261333793 },
        { 3.67804385359477, 64.3024277928634, -956.831647093902 },
        { 3.88941851359021, 61.2431766768403, -970.915933603784 },
        { 4.11838221627456, 57.1050105768142, -987.638678812716 },
        { 5.12804414772727, 29.2508495124784, -989.773541737584 },
        { 5.63279555784976, -10.9343955714416, -697.230047142657 },
        { 5.48143472068616, -19.4432858559597, -584.017760204114 },
        { 4.87135886593364, -30.6642571412548, -377.747861840498 },
        { 3.89786321349537, -38.1435780251377, -158.294649725505 },
        { 2.9178338362408, -39.8919068875376, -9.77213411172419 },
        { 0.729102411879623, -35.0702100786288, 151.180850900967 },
        { -0.418638091408524, -29.177712691106, 161.754590684628 },
        { -1.73780678564443, -21.8282011034198, 122.373572270007 },
        { -2.17552404860745, -19.4998389411748, 99.471786516864 },
        { -2.82115101938066, -16.6967596665099, 57.967374228705 },
        { -3.12319779917189, -15.8316597648447, 36.7208060662378 },
        { -3.33231685989518, -15.4445131038382, 21.2941018963611 },
        { -3.86589002517467, -15.398151385707, -18.6133561855531 },
        { -3.97573458091502, -15.5566271713541, -26.7036291373556 },
        { -4.59926033157387, -17.4142498501479, -70.955706229317 },
        { -4.71253960942243, -17.8884391311594, -78.3107992201512 },
        { -5.61906189362099, -22.5474456463921, -128.626548765267 },
        { -5.86945242845694, -24.0215441558777, -138.74884725862 },
        { -7.4452093831922, -32.5456192895906, -161.48738584818 },
        { -8.04055097256696, -35.4285973969422, -148.489029924356 },
        { -9.04666460257372, -38.8200076407872, -97.0989867545884 },
        { -9.78234723376402, -40.0884181919181, -32.9971579786333 },
        { -10.2621856163657, -40.3892982005854, 22.1189326951067 },
        { -12.3602151648726, -26.4505391403938, 464.628042263677 },
        { -12.8300185701924, -13.3059016656268, 671.101746125947 },
        { -12.8615587080358, 15.8765793274255, 933.183909184677 },
        { -12.7113615421543, 24.4455989673524, 973.267928109839 },
        { -12.3122499491001, 37.2349320011046, 1005.94371320586 },
        { -11.9172090294034, 46.7976441022677, 1007.93102987605 },
        { -11.3200749901328, 57.9085033213141, 984.027851206505 },
        { -10.1609723169144, 74.647671967991, 849.183438659636 },
        { -10.0103363167357, 74.5418514525089, 849.887486276983 },
        { -8.2190421582789, 109.703205777684, 2239.73935456353 },
        { 3.63805074514229, 246.750093993463, -4529.62865277577 },
        { 8.64707244831728, 80.442370755781, -951.380701401518 },
        { 10.4706796521632, 70.7814701874263, -893.675446434317 },
        { 10.8610207961131, 65.2715169363745, -949.809351506388 },
        { 11.9196107105854, 45.8644164860971, -1007.93971238314 },
        { 12.453357824921, 28.4314030968722, -988.046445016842 },
        { 12.6343215910156, -19.5355654216973, -581.082451384057 },
        { 12.2726476448003, -29.0615823885304, -417.699828306117 },
        { 11.7427917559874, -34.3517420257848, -278.965594402096 },
        { 10.1375897651959, -38.7670412815923, 0.72562468586193 },
        { 5.511629925975, -22.5427180142127, 121.029212752589 },
        { 5.22431755376706, -20.3302313585154, 110.190071064804 },
        { 4.2094042155154, -16.0810556482156, 43.7532632376241 },
        { 4.19151186483083, -16.0346217375627, 42.6256010214265 },
        { 3.86489180257353, -15.3963913771801, 18.5519205056239 },
        { 3.74782708949535, -15.2886701695477, 9.85369550027866 },
        { 2.89098193623342, -16.4222999015319, -52.4734454493373 },
        { 1.99775496316789, -20.1456472843174, -106.840907536075 },
        { -0.133089787516723, -32.0924626116875, -161.242144249191 },
        { -0.478390239808476, -34.0229198563743, -156.551813722815 },
        { -1.17867874902951, -37.0821301574163, -133.490543018449 },
        { -3.1562603273065, -40.158261388105, 51.4809507538975 },
        { -5.51693585615811, -16.5236587038853, 622.13619288383 },
        { -5.69006363944387, -8.32388803640788, 730.800213594455 },
        { -5.49565265604792, 22.5651304396596, 965.99639274957 },
        { -5.41323437400103, 26.2507201844282, 978.843543880994 },
        { -4.3488090089034, 52.3208470966429, 993.802109637462 },
        { -3.55945997147013, 65.8496271984382, 966.648389757047 },
        { 7.62751864388135, 91.1003678791594, -685.669303792587 },
        { 10.0253155801552, 66.7302246462995, -943.908854365581 },
        { 11.0672504983202, 49.7358145072732, -1003.7590484588 },
        { 11.446121073641, 41.0262610293843, -1008.93522184062 },
        { 12.0738274026005, 18.9788448591498, -948.335803794572 },
        { 12.3355683960285, 0.225916429603557, -816.411214446518 },
        { 12.3288098974924, -2.76794564635974, -788.681043029101 },
        { 11.8715275943106, -22.1033097107542, -540.324474607456 },
        { 10.8609701023009, -35.9889837159784, -238.047210055992 },
        { 10.2777410509975, -38.618655853455, -125.548322597293 },
        { 8.37381685286644, -38.844821024697, 96.4091399144381 },
        { 7.63469201198745, -36.4188485220765, 137.94174818185 },
        { 7.02360213728434, -33.8703981048116, 157.016865200894 },
        { 6.96555719365872, -33.4980129583798, 158.005337203852 },
        { 4.97788018696536, -22.5301876875819, 128.899698630988 },
        { 4.60390614421453, -20.5526881684249, 112.188475147356 },
        { 4.5281040817123, -20.1184188853877, 107.224102861379 },
        { 3.34553297266228, -15.4412375349484, 27.4804059488781 },
        { 2.34934904394812, -15.9740129683183, -45.1939234754681 },
        { 1.55246350524458, -19.0398288372825, -96.097563534975 },
        { -0.341812533251754, -29.892779773334, -161.98415416968 },
        { -0.545238307723593, -31.0848565790302, -162.793851316324 },
        { -0.588352423873747, -31.3154528216173, -162.653613101103 },
        { -1.21239996170669, -34.3201716157996, -154.110760381056 },
        { -1.63505477562825, -36.1690111829931, -140.6124159733 },
        { -2.9230735735453, -39.7192088050287, -56.3921343148385 },
        { -4.97814318562223, -35.3423671434732, 244.742287924313 },
        { -5.06617722251017, -35.1176486624485, 265.177406288784 },
        { -6.19521030337128, -7.03968125153197, 744.452951605329 },
        { -6.01949486538605, 17.4115100961122, 932.78337104895 },
        { -3.70870035528294, 67.4400982584848, 926.095116455937 },
        { -0.126434788546987, 101.846165752818, 641.134592250222 },
        { 0.701050781463038, 94.6133880919096, 788.686021662491 }
    };
    
    // We have the actual derivatives too, which we expect to be better than Fornbergs
    // So we define these here too

    vector<vector<double>> act_der = {
        { -0.84659689813977, 102.198510798502, -380.934495728811 },
        { -0.066196622253277, 98.7825398776912, -498.141776467768 },
        { 3.69848861082895, 64.2165472698516, -957.347207270611 },
        { 3.89149066763942, 61.248812032798, -971.625972053372 },
        { 4.13751108578498, 57.178330979337, -987.270976361419 },
        { 5.33575329763218, 29.4354632764644, -990.072983930931 },
        { 5.71024766614384, -11.1130765680727, -697.016939466085 },
        { 5.50991219836211, -19.4439772949013, -583.157728705626 },
        { 4.912262330062, -30.6859856923646, -376.626296640075 },
        { 3.91773331395273, -38.1599484483296, -156.775510722092 },
        { 2.91261552213449, -40.1590926623421, -8.67685557345618 },
        { 0.680830222436794, -34.9125272537386, 151.299098168267 },
        { -0.466611985796209, -29.1881530808044, 161.057453552093 },
        { -1.76059451328056, -21.7949108272171, 122.077308035906 },
        { -2.18719796156207, -19.5009197415822, 99.2668754149997 },
        { -2.8279931175868, -16.6965273969846, 57.9279794125431 },
        { -3.12475029417214, -15.8317466352207, 36.6999885841963 },
        { -3.333489263484, -15.444404957671, 21.2870043754433 },
        { -3.86545662988452, -15.3979564944258, -18.6086156943461 },
        { -3.97414362176646, -15.5570531380264, -26.6928937029467 },
        { -4.59678640048956, -17.4143158389072, -70.9159224174217 },
        { -4.70830227291854, -17.8857472901093, -78.279503960007 },
        { -5.60962732883914, -22.5598103104708, -128.413410984917 },
        { -5.85509787318969, -23.9699857399523, -138.617976448303 },
        { -7.41855348075094, -32.6121872352529, -161.394061118842 },
        { -8.02885450785697, -35.4116370851457, -148.462713791342 },
        { -9.03809820884115, -38.8391650611293, -97.2732011035598 },
        { -9.78084182617149, -40.1074285864942, -33.6217555330013 },
        { -10.2741714732946, -40.1887819110067, 22.31777436336 },
        { -12.4518944401306, -26.5817902492202, 463.059840169585 },
        { -12.9277040775496, -13.3378705187714, 669.98919629096 },
        { -12.9091272906545, 15.965952897748, 933.240693371422 },
        { -12.7299902120822, 24.4406736711232, 973.348950565515 },
        { -12.3326760062058, 37.2403375442781, 1006.03638667734 },
        { -11.9348760855023, 46.7907095812802, 1008.00838101071 },
        { -11.3523522282848, 57.8979050729595, 984.108949307779 },
        { -10.1664116002032, 74.6818385083388, 883.596972782418 },
        { -10.0147334931953, 76.439485426722, 867.501816448262 },
        { -8.71256345849655, 88.9028513624401, 709.87270356924 },
        { 5.67091590039564, 104.416490771198, -264.059961534296 },
        { 8.72468895590559, 88.8058695987122, -711.471137356482 },
        { 10.4892729342342, 70.6842419089335, -915.801880892209 },
        { 10.8791676331259, 65.3324071764651, -950.338049458613 },
        { 11.9757073535784, 45.902352154531, -1008.66793544248 },
        { 12.6113132948914, 28.814407162849, -988.298435902323 },
        { 12.7591115929524, -19.6933764747571, -580.510698168963 },
        { 12.294206214335, -29.0634000159769, -413.536089704494 },
        { 11.7701573967522, -34.6945848068096, -277.651358207407 },
        { 10.0715512144834, -40.2389439014152, 2.06880983930634 },
        { 5.47000179001202, -21.7711691915784, 121.895515245991 },
        { 5.21337147820434, -20.3654535042625, 108.645176345156 },
        { 4.20879417105232, -16.0809114427439, 43.862493282991 },
        { 4.19136952054175, -16.0339966756938, 42.6043479038701 },
        { 3.86430277037719, -15.3965652061708, 18.5224691179283 },
        { 3.74805842934082, -15.2891755247542, 9.81822493632518 },
        { 2.91176339062732, -16.4183106806287, -52.0376335321454 },
        { 2.07322641605038, -20.0913046965608, -105.777061914026 },
        { -0.108582952169211, -32.2283080597495, -161.738342931552 },
        { -0.47290878816836, -33.9831110294496, -156.412132385966 },
        { -1.15950175861728, -36.8229580510482, -133.609923136567 },
        { -3.21707566709985, -39.94843053838, 47.5448857354185 },
        { -5.59141364396234, -16.7282605555855, 623.082706126629 },
        { -5.74754749172586, -8.38766392362975, 729.226481442513 },
        { -5.51540651175804, 22.6841884796176, 966.068347744925 },
        { -5.42866030480415, 26.1420212666358, 979.523868305897 },
        { -4.39993709932731, 52.417710708948, 1000.16589924583 },
        { -3.72040917708884, 63.8886247794099, 959.049223362592 },
        { 7.82358327698808, 90.3755576403501, -687.227830850747 },
        { 10.1007332308871, 66.3969061161282, -945.068086280396 },
        { 11.0914295334206, 49.6796889215656, -1004.86316962461 },
        { 11.4780637901204, 41.0897922530504, -1009.17262489811 },
        { 12.1486799622683, 18.9652305400009, -948.446435462095 },
        { 12.346408358231, 0.177843294821222, -816.394744514316 },
        { 12.3417488816327, -2.73179616076299, -788.694927127467 },
        { 11.9628796473273, -22.1197031922992, -539.683687313521 },
        { 10.8875116049814, -35.9178834085914, -236.674781097529 },
        { 10.2879973859885, -38.7807990278552, -124.50476894601 },
        { 8.36271116988949, -38.728705009314, 96.4900163587773 },
        { 7.62706609006378, -36.3983644028355, 137.998770768416 },
        { 7.02280857347798, -33.8421899349947, 156.93911404326 },
        { 6.96208088152284, -33.5583018892835, 158.121207274022 },
        { 4.95048813249449, -22.4935949680439, 128.920381702128 },
        { 4.60270745671554, -20.544520538221, 111.764939736616 },
        { 4.52414556776652, -20.120924117686, 107.473921126525 },
        { 3.32432598150143, -15.4415060400468, 27.3609042007943 },
        { 2.36702870368854, -15.9727323683232, -44.4691814587668 },
        { 1.61393924951804, -19.0092257088344, -95.0272422862804 },
        { -0.327103705577505, -29.9277876929808, -162.355033094752 },
        { -0.544973242414788, -31.0895951523097, -162.762864175309 },
        { -0.587657579618167, -31.3121974955939, -162.657440631114 },
        { -1.20659609345089, -34.3203334442766, -154.116757374445 },
        { -1.62631297607294, -36.0837172208712, -140.61048493674 },
        { -2.91367142930697, -39.6323190366537, -57.0715518975328 },
        { -4.98181844997095, -35.6431104328852, 243.439846492017 },
        { -5.07540795516513, -34.9709234738154, 263.868376629003 },
        { -6.37289706801967, -6.99773637501022, 743.437891356334 },
        { -6.24897029282644, 16.7481590093378, 936.568300338183 },
        { -4.06547437117131, 67.7211387195838, 937.870694842906 },
        { -0.19723158852848, 100.487422171066, 448.519141065872 },
        { 1.61522219816047, 105.929208438714, 168.883112960017 }
    };

    // We can compute the 1st, 2nd and 3rd derivative based on Fornberg
    ds.compute_app_der(3);

    for(size_t i = 0; i < fb.size(); i++) {
        CHECK( ds.Yder[0][i] == doctest::Approx(fb[i][0]).epsilon(1e-2) );
        CHECK( ds.Yder[1][i] == doctest::Approx(fb[i][1]).epsilon(1e-2) );
        CHECK( ds.Yder[2][i] == doctest::Approx(fb[i][2]).epsilon(1e-2) );
    }

    // 2. Normalisation test

    // Read in the min-max normalisation from excel for validation
    // using =(A2-MIN(A$2:A$101))/(MAX(A$2:A$101)-MIN(A$2:A$101))
    // and filling right to build the normalisation of the different elements
    // =CONCAT("{ ",G2, ", ",H2, ", ",I2, ", ",J2, " },")
    // we then extract normalisation for y, yd, ydd, yddd to compare using
    
    DataSet ds2 = DataSet(fn);
    ds2.load();

    vector<vector<double>> norm = {
        { 0.454394517747287, 0.470323271454913, 0.974476672377094, 0.31144360735553 },
        { 0.453937149058219, 0.50070462685128, 0.951106527334404, 0.253339113809523 },
        { 0.465367673564619, 0.647265620684606, 0.714625515195689, 0.0256920015981162 },
        { 0.466883003839468, 0.654779282918423, 0.694321945713961, 0.018613427716578 },
        { 0.469048019540234, 0.6643569752763, 0.666474011753702, 0.0108575524320999 },
        { 0.486283173791975, 0.71100511676716, 0.476672969196116, 0.00946848146558565 },
        { 0.520815852237398, 0.725584361361565, 0.199262745454751, 0.154748475480209 },
        { 0.530300335860366, 0.717785205936793, 0.142267424699497, 0.211193192353379 },
        { 0.546235066123207, 0.69451841117459, 0.065355948310964, 0.313579359712961 },
        { 0.56260547041101, 0.655800921670768, 0.0142233134906695, 0.422568481300953 },
        { 0.573903954768162, 0.616671206072252, 0.000546297109149255, 0.495987105963201 },
        { 0.587288352085278, 0.529786738634717, 0.0364403364371889, 0.575293798457882 },
        { 0.58770594824207, 0.485116265542535, 0.0756032736522243, 0.580131418560016 },
        { 0.580111655087053, 0.434740907846083, 0.126183664354458, 0.560807349276196 },
        { 0.574798667892325, 0.418133031893152, 0.141877856618015, 0.549499275011126 },
        { 0.563160162344376, 0.393186570477127, 0.161063926221411, 0.52900587561793 },
        { 0.556095669917158, 0.381633671885414, 0.166980268105186, 0.518482283155893 },
        { 0.550495435977553, 0.37350736413324, 0.169630241244673, 0.510841429824633 },
        { 0.534260350420489, 0.352797620534643, 0.169948015414364, 0.491063521965633 },
        { 0.530687375928108, 0.348566384040555, 0.168859565974089, 0.487055811212399 },
        { 0.509532320759661, 0.32432660334099, 0.156153222826514, 0.465132628025102 },
        { 0.505717089543777, 0.319985237176362, 0.152927954916545, 0.461482196298343 },
        { 0.475700223040015, 0.284896222349364, 0.120950653804568, 0.436628746420491 },
        { 0.467850172397108, 0.275339936840902, 0.111303029428774, 0.431569921538889 },
        { 0.420355985859811, 0.214473863458491, 0.0521779645159299, 0.420278874972507 },
        { 0.402391101380673, 0.190714553042802, 0.0330257086717255, 0.426689478329182 },
        { 0.372407977171707, 0.151424213830255, 0.00957649678042486, 0.452066235565064 },
        { 0.349494955353583, 0.122508850133256, 0.000899753556540578, 0.483620888015245 },
        { 0.33352844281457, 0.103303291396381, 0.00034318002660232, 0.511352425112065 },
        { 0.242905947130656, 0.0185234963929533, 0.0934345370968033, 0.729846484155445 },
        { 0.20435123042137, 0, 0.184041960933089, 0.832429918916741 },
        { 0.143432297675505, 0.00072320318459849, 0.384522181469298, 0.962934566892969 },
        { 0.128652982501177, 0.00769709519481039, 0.442501437810001, 0.982817887763335 },
        { 0.107656336928313, 0.0231647269547356, 0.530069513811744, 0.999022400901261 },
        { 0.0927385710738386, 0.0386512678248179, 0.595407768993206, 1 },
        { 0.0759157267245432, 0.0613291997526143, 0.671396931569696, 0.988152063878787 },
        { 0.0509353303394478, 0.107498434713237, 0.786223131167017, 0.938324122692084 },
        { 0.048306836156528, 0.113403335848261, 0.798247959354578, 0.930345088442302 },
        { 0.0291819467531294, 0.16409743711026, 0.883515274677249, 0.852201821964337 },
        { 0, 0.724053156939315, 0.989650839507118, 0.369383144686171 },
        { 0.0293363426404612, 0.842938000225547, 0.882851780186998, 0.147582932156106 },
        { 0.0568885298045537, 0.911634097124588, 0.75887383150492, 0.0462877370609752 },
        { 0.0648371830497124, 0.926812883934642, 0.722259598877728, 0.0291667308323626 },
        { 0.0941053699547217, 0.969501698870614, 0.589330128874434, 0.00025019542329203 },
        { 0.12132225043739, 0.994246141679962, 0.472424053795104, 0.0103481982700815 },
        { 0.221293960913556, 1, 0.140561176273537, 0.212505434799104 },
        { 0.251999251011567, 0.981901011609186, 0.0764567637102857, 0.295281649712569 },
        { 0.27753443063157, 0.961499540897322, 0.0379313756508602, 0.36264532758731 },
        { 0.340178225310735, 0.895371991104553, 0, 0.501314176454786 },
        { 0.48022903454688, 0.716231474681738, 0.126346091225555, 0.560717227076263 },
        { 0.488675695248966, 0.706240734097167, 0.135963204562562, 0.55414848641193 },
        { 0.522802330677344, 0.667132059824799, 0.165275623122445, 0.522033032780153 },
        { 0.523393776086717, 0.666453709859817, 0.165596587479584, 0.521409318113281 },
        { 0.534297935229306, 0.653720845095262, 0.169957533823352, 0.509470935432005 },
        { 0.538041362338049, 0.649195397389813, 0.170692233412129, 0.505155881821988 },
        { 0.56127559978744, 0.616638032185769, 0.162967327967289, 0.474491376114628 },
        { 0.576390629457741, 0.583993387347993, 0.137838775973383, 0.44785052027449 },
        { 0.588152639366539, 0.499054506787367, 0.0548042491706755, 0.420108200247878 },
        { 0.587739789416054, 0.484871128019343, 0.0427988776748607, 0.422748622961548 },
        { 0.585699349838534, 0.458141735818449, 0.023370247182287, 0.434052620561469 },
        { 0.570882509272288, 0.378039401030201, 0.00198752846214529, 0.52385854692174 },
        { 0.527056552940054, 0.285605289799002, 0.160846825860677, 0.809176432974265 },
        { 0.51797444975764, 0.27952692454866, 0.217908480526376, 0.861796289598417 },
        { 0.49114296083563, 0.288564283750579, 0.43048455750205, 0.979208592018796 },
        { 0.488618926379869, 0.291941355010272, 0.454141097806206, 0.985879049712755 },
        { 0.471701766158616, 0.331990040634555, 0.633904534790546, 0.99611215763885 },
        { 0.465532410940448, 0.35844438713492, 0.712382054597797, 0.97572892194369 },
        { 0.493296698302346, 0.807857525850036, 0.893590699825151, 0.159601341230315 },
        { 0.527033035519662, 0.896508060938122, 0.729542299812375, 0.0317792694011772 },
        { 0.550522698604724, 0.935076341072244, 0.615172535079616, 0.00213637510014053 },
        { 0.563003851013559, 0.950128197310844, 0.556405310270433, 0 },
        { 0.597492154006827, 0.976235605124652, 0.405041546284649, 0.0301044820757944 },
        { 0.631238277136239, 0.983933265998583, 0.276508846483793, 0.0955679633206441 },
        { 0.637045572256264, 0.983751870349621, 0.25660273554922, 0.109299907705263 },
        { 0.683069448587806, 0.969002310140783, 0.123961618307612, 0.232745071567371 },
        { 0.736531280952898, 0.927137718743383, 0.0295622570556191, 0.382959110529865 },
        { 0.758505247308859, 0.903798343918446, 0.00997580423789536, 0.438566421833584 },
        { 0.817264237244892, 0.828846032164602, 0.0103322021105317, 0.548122671202103 },
        { 0.837536145875895, 0.800207017922346, 0.026275077279781, 0.568700276428431 },
        { 0.853869786030351, 0.776682984257102, 0.0437629802662856, 0.578089787443735 },
        { 0.85550488745823, 0.77431882621065, 0.0457051820466748, 0.578675799917231 },
        { 0.910737137067942, 0.696006559916841, 0.121403661805058, 0.564199743734689 },
        { 0.920760101583794, 0.68246729213682, 0.134738128982884, 0.555695082073063 },
        { 0.923048285179322, 0.679408840285225, 0.13763613661145, 0.55356784678901 },
        { 0.958088238813167, 0.632699290855051, 0.169650074002888, 0.513852513018238 },
        { 0.981164751024069, 0.595431250701977, 0.166015723292617, 0.478243370631336 },
        { 0.992466264618484, 0.566113118636455, 0.145241749674579, 0.453179650182147 },
        { 1, 0.49054738950933, 0.0705431110905789, 0.419802481444561 },
        { 0.999596560125509, 0.48206562440337, 0.0625946801859766, 0.419600302721203 },
        { 0.999496027480729, 0.480403902773452, 0.0610717605915207, 0.419652565529491 },
        { 0.997312765892648, 0.456308330874928, 0.0404917922432662, 0.423886535228616 },
        { 0.995124725554019, 0.439968552211587, 0.0284277157097457, 0.43058215272558 },
        { 0.985213760534866, 0.389851072888823, 0.00415018494144949, 0.471995854715883 },
        { 0.957909744267708, 0.309337121794488, 0.0314420986716424, 0.620971775820274 },
        { 0.956180172585115, 0.305693637666494, 0.036040822458652, 0.631099042573801 },
        { 0.913777787885561, 0.25518176692712, 0.227417580329357, 0.868841472887468 },
        { 0.890620981312891, 0.260006295462805, 0.389873594202283, 0.964584199205098 },
        { 0.854513060346328, 0.345010834354039, 0.738601951879223, 0.965229849992463 },
        { 0.84134125585687, 0.495603373042476, 0.962770369738374, 0.722638058604579 },
        { 0.842932563622877, 0.566163064439737, 1, 0.584010921383511 }
    };

    ds2.normalise();

    for(size_t i = 0; i < norm.size(); i++) {
        CHECK( ds2.y[i] == doctest::Approx(norm[i][0]).epsilon(1e-15) );
        CHECK( ds2.Yder[0][i] == doctest::Approx(norm[i][1]).epsilon(1e-15) );
        CHECK( ds2.Yder[1][i] == doctest::Approx(norm[i][2]).epsilon(1e-15) );
        CHECK( ds2.Yder[2][i] == doctest::Approx(norm[i][3]).epsilon(1e-15) );
    }

}