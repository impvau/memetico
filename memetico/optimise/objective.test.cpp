
#include "doctest.h"
#include <memetico/data/data_set.h>
#include <memetico/models/regression.h>
#include <memetico/models/cont_frac.h>
#include <memetico/optimise/objective.h>
#include <string>
#include <ostream>
#include <memetico/models/mutation.h>
#include <iomanip>

// Define the template strucutre of a model
template<
    typename T,         
    typename U, 
    template <typename, typename> class MutationPolicy>
struct Traits {
    using TType = T;                        // Term type, e.g. Regression<double>
    using UType = U;                        // Data type, e.g. double, should match T::TType
    template <typename V, typename W>
    using MPType = MutationPolicy<V, W>;    // Mutation Policy general class, e.g. MutateHardSoft<TermType, DataType>
};

typedef double DataType;
typedef Regression<DataType> TermType;
typedef ContinuedFraction<Traits<TermType, DataType, mutation::MutateHardSoft>> ModelType;

inline void init(string filename) {

    // Create sample data
    string fn(filename);
    ofstream f;
    f.open(fn);
    if (!f.is_open())
        throw runtime_error("Unable to open file "+ fn);

    f << "y,x" << endl;
    // Argon dataset, code generated in excel with =CONCAT("f << ",CHAR(34),A2, ",", B2, CHAR(34), " << endl;")
    f << "363.94,3.1" << endl;
    f << "58.41,3.3" << endl;
    f << "-14.92,3.4" << endl;
    f << "-58.41,3.5" << endl;
    f << "-81.69,3.6" << endl;
    f << "-88.36,3.65" << endl;
    f << "-92.56,3.7" << endl;
    f << "-94.73,3.75" << endl;
    f << "-95.39,3.8" << endl;
    f << "-94.75,3.85" << endl;
    f << "-93.16,3.9" << endl;
    f << "-90.89,3.95" << endl;
    f << "-88.01,4" << endl;
    f << "-81.19,4.1" << endl;
    f << "-73.63,4.2" << endl;
    f << "-65.98,4.3" << endl;
    f << "-58.6,4.4" << endl;
    f << "-51.78,4.5" << endl;
    f << "-45.6,4.6" << endl;
    f << "-40.13,4.7" << endl;
    f << "-35.34,4.8" << endl;
    f << "-31.17,4.9" << endl;
    f << "-27.57,5" << endl;
    f << "-24.46,5.1" << endl;
    f << "-19.37,5.3" << endl;
    f << "-15.47,5.5" << endl;
    f << "-12.43,5.7" << endl;
    f << "-10,5.9" << endl;
    f << "-8.13,6.1" << endl;
    f << "-6.63,6.3" << endl;
    f << "-5.44,6.5" << endl;
    f << "-4.49,6.7" << endl;

    f.close();

}

inline void init2(string filename) {

    // Create sample data
    string fn(filename);
    ofstream f;
    f.open(fn);
    if (!f.is_open())
        throw runtime_error("Unable to open file "+ fn);

        f << "y,w,x" << endl;  // Updated header to include weight column

    // Data with statically defined but varied weights
    f << "363.94,0.10,3.1" << endl;
    f << "58.41,0.11,3.3" << endl;
    f << "-14.92,0.12,3.4" << endl;
    f << "-58.41,0.13,3.5" << endl;
    f << "-81.69,0.14,3.6" << endl;
    f << "-88.36,0.15,3.65" << endl;
    f << "-92.56,0.16,3.7" << endl;
    f << "-94.73,0.17,3.75" << endl;
    f << "-95.39,0.18,3.8" << endl;
    f << "-94.75,0.19,3.85" << endl;
    f << "-93.16,0.20,3.9" << endl;
    f << "-90.89,0.21,3.95" << endl;
    f << "-88.01,0.22,4" << endl;
    f << "-81.19,0.23,4.1" << endl;
    f << "-73.63,0.24,4.2" << endl;
    f << "-65.98,0.25,4.3" << endl;
    f << "-58.6,0.26,4.4" << endl;
    f << "-51.78,0.27,4.5" << endl;
    f << "-45.6,0.28,4.6" << endl;
    f << "-40.13,0.29,4.7" << endl;
    f << "-35.34,0.30,4.8" << endl;
    f << "-31.17,0.31,4.9" << endl;
    f << "-27.57,0.32,5" << endl;
    f << "-24.46,0.33,5.1" << endl;
    f << "-19.37,0.34,5.3" << endl;
    f << "-15.47,0.35,5.5" << endl;
    f << "-12.43,0.36,5.7" << endl;
    f << "-10,0.37,5.9" << endl;
    f << "-8.13,0.38,6.1" << endl;
    f << "-6.63,0.39,6.3" << endl;
    f << "-5.44,0.40,6.5" << endl;
    f << "-4.49,0.41,6.7" << endl;

    f.close();

}

inline ModelType small_frac() {

    // f(x) = x1 - 20 
    size_t params = 2;
    size_t depth = 0;
    ModelType o  = ModelType(depth);
    Regression<double> m1 = Regression<double>(params);
    o.set_global_active(0, true);
    o.set_global_active(1, true);
    double d0 = 1;
    double d1 = -20;
    m1.set_active(0, true);
    m1.set_active(1, true);
    m1.set_value(0, d0);
    m1.set_value(1, d1);
    o.set_terms(0,m1);
    
    return o;
}

inline void setup_cont_frac_ivs(size_t size) {

    // Setup IVs in Regression
    ModelType::IVS.clear();
    for(size_t i = 0; i < size-1; i++)
        ModelType::IVS.push_back("x"+to_string(i+1));

}

inline TermType build_reg_frac(vector<bool> active, vector<double> vals, size_t params) {

    if( active.size() != params )
        throw invalid_argument("active.size() != params");

    if( vals.size() != params )
        throw invalid_argument("vals.size() != params");

    TermType o = TermType(params);
    for(size_t i = 0; i < params; i++) {
        o.set_active(i, active[i]);
        o.set_value(i, vals[i]);
    }

    return o;
}

inline ModelType build_cont_frac(vector<bool> active, vector<double> vals, vector<bool> globals, size_t params, size_t depth) {

    if( globals.size() != params)
        throw invalid_argument("globals.size() != params");

    if( active.size() != params*(2*depth+1) )
        throw invalid_argument("active.size() != params*2*depth");

    if( vals.size() != params*(2*depth+1) )
        throw invalid_argument("vals.size() != params*2*depth");

    ModelType c = ModelType(depth);

    for(size_t i = 0; i < params; i++)
        c.set_global_active(i, globals[i]);

    size_t terms = 2*depth+1;
    for(size_t i = 0; i < terms; i++) {

        vector reg_active(active.begin()+i*params, active.begin()+i*params+params);
        vector reg_vals(vals.begin()+i*params, vals.begin()+i*params+params);
        Regression<double> o = build_reg_frac(reg_active,reg_vals,params);
        c.set_terms(i, o);
    }

    return c;
}

inline ModelType frac_1() {

    // f(x) = 2*x1 
    return build_cont_frac(
        {true, false, true, false, true, true},
        {1, 12, 2, -7, 3, -20},
        {true, false, true, false, true, true},
        6,
        3
    );

}

TEST_CASE("Objective: mse on CPU") {

    RandInt ri = RandInt(42);
    RandReal rr = RandReal(42);
    RandInt::RANDINT = &ri;
    RandReal::RANDREAL = &rr;

    DataSet::IVS.clear();

    string fn = "test_data.csv";
    init(fn);
    DataSet ds = DataSet(fn);
    ds.load();

    ModelType f1 = small_frac();

    ModelType::IVS.clear();
    for(size_t i = 0; i < DataSet::IVS.size(); i++)
        ModelType::IVS.push_back(DataSet::IVS[i]);

    vector<size_t> all;
    double res = objective::mse<DataType>(&f1, &ds, all);
    REQUIRE( abs(res-6845.240365625) < 0.0000001 );

    // Delete the file
    remove(fn.c_str());

}

TEST_CASE("Objective: mse on GPU") {

    meme::GPU = true;

    RandInt ri = RandInt(42);
    RandReal rr = RandReal(42);
    RandInt::RANDINT = &ri;
    RandReal::RANDREAL = &rr;

    DataSet::IVS.clear();

    string fn = "test_data.csv";
    init(fn);
    DataSet ds = DataSet(fn, true);
    ds.load();

    ModelType f1 = small_frac();

    ModelType::IVS.clear();
    for(size_t i = 0; i < DataSet::IVS.size(); i++)
        ModelType::IVS.push_back(DataSet::IVS[i]);

    vector<size_t> all;
    double res = objective::mse<DataType>(&f1, &ds, all);
    REQUIRE( abs(res-6845.240366) < 0.001 );

    // Delete the file
    remove(fn.c_str());

    
}

TEST_CASE("Objective: weighted mse on GPU") {

    meme::GPU = true;

    RandInt ri = RandInt(42);
    RandReal rr = RandReal(42);
    RandInt::RANDINT = &ri;
    RandReal::RANDREAL = &rr;

    DataSet::IVS.clear();

    string fn = "test_data.csv";
    init2(fn);
    DataSet ds = DataSet(fn,true);
    ds.load();

    ModelType f1 = small_frac();

    ModelType::IVS.clear();
    for(size_t i = 0; i < DataSet::IVS.size(); i++)
        ModelType::IVS.push_back(DataSet::IVS[i]);

    vector<size_t> all;
    double res = objective::mse<DataType>(&f1, &ds, all);
    REQUIRE( abs(res-3503.135844) < 0.001 );

    // Delete the file
    remove(fn.c_str());

}

TEST_CASE("Objective: derivative ") {

    /* */

    // Load data with known derivative
    string fn("test_data.csv");
    ofstream f;
    f.open(fn);
    if (!f.is_open())
        throw runtime_error("Unable to open file "+ fn);

    // Write the header
    f << "y,x,yd,ydd,yddd" << endl;
    // In excel, we can use the following to build the string =CONCAT("f << """, A2,",",B2,",",C2,",",D2,",",E2, """ << endl;")
    // This is the Ackley 100 samples data
    f << "3.5779985988974,-0.976908981345251,-0.84659689813977,102.198510798502,-380.934495728811" << endl;
    f << "3.5744740824253,-0.969148927003456,-0.066196622253277,98.7825398776912,-498.141776467768" << endl;
    f << "3.66255853785587,-0.923923424750924,3.69848861082895,64.2165472698516,-957.347207270611" << endl;
    f << "3.67423578346107,-0.920847025073935,3.89149066763942,61.248812032798,-971.625972053372" << endl;
    f << "3.69091955233745,-0.916692607242046,4.13751108578498,57.178330979337,-987.270976361419" << endl;
    f << "3.82373490789497,-0.889027194136539,5.33575329763218,29.4354632764644,-990.072983930931" << endl;
    f << "4.089846246331,-0.842193654338596,5.71024766614384,-11.1130765680727,-697.016939466085" << endl;
    f << "4.16293436879655,-0.829186593079273,5.50991219836211,-19.4439772949013,-583.157728705626" << endl;
    f << "4.28572856226068,-0.80572152129487,4.912262330062,-30.6859856923646,-376.626296640075" << endl;
    f << "4.4118800915332,-0.777262017601174,3.91773331395273,-38.1599484483296,-156.775510722092" << endl;
    f << "4.49894703594448,-0.751799162121505,2.91261552213449,-40.1590926623421,-8.67685557345618" << endl;
    f << "4.60208817774286,-0.693533417307138,0.680830222436794,-34.9125272537386,151.299098168267" << endl;
    f << "4.60530620418078,-0.6577630452412,-0.466611985796209,-29.1881530808044,161.057453552093" << endl;
    f << "4.54678402730559,-0.606661846067897,-1.76059451328056,-21.7949108272171,122.077308035906" << endl;
    f << "4.50584176052727,-0.585961502778545,-2.18719796156207,-19.5009197415822,99.2668754149997" << endl;
    f << "4.41615458802327,-0.550313750771967,-2.8279931175868,-16.6965273969846,57.9279794125431" << endl;
    f << "4.36171509419283,-0.532031287123978,-3.12475029417214,-15.8317466352207,36.6999885841963" << endl;
    f << "4.31855928305068,-0.518668497696744,-3.333489263484,-15.444404957671,21.2870043754433" << endl;
    f << "4.19345052978551,-0.483912276075844,-3.86545662988452,-15.3979564944258,-18.6086156943461" << endl;
    f << "4.16591692778392,-0.476887872970988,-3.97414362176646,-15.5570531380264,-26.6928937029467" << endl;
    f << "4.00289452989895,-0.438794704893315,-4.59678640048956,-17.4143158389072,-70.9159224174217" << endl;
    f << "3.97349407991919,-0.432475147934399,-4.70830227291854,-17.8857472901093,-78.279503960007" << endl;
    f << "3.74218191762642,-0.387485236755882,-5.60962732883914,-22.5598103104708,-128.413410984917" << endl;
    f << "3.68168885489813,-0.376930050154756,-5.85509787318969,-23.9699857399523,-138.617976448303" << endl;
    f << "3.31569518987312,-0.32144766812631,-7.41855348075094,-32.6121872352529,-161.394061118842" << endl;
    f << "3.17725647996686,-0.303514063827696,-8.02885450785697,-35.4116370851457,-148.462713791342" << endl;
    f << "2.94620433825848,-0.276413371582682,-9.03809820884115,-38.8391650611293,-97.2732011035598" << endl;
    f << "2.76963492116935,-0.257644314163112,-9.78084182617149,-40.1074285864942,-33.6217555330013" << endl;
    f << "2.64659581116728,-0.245374049466792,-10.2741714732946,-40.1887819110067,22.31777436336" << endl;
    f << "1.9482522506765,-0.184282210854747,-12.4518944401306,-26.5817902492202,463.059840169585" << endl;
    f << "1.65114679206734,-0.160916761564189,-12.9277040775496,-13.3378705187714,669.98919629096" << endl;
    f << "1.18170105374393,-0.124824364030686,-12.9091272906545,15.965952897748,933.240693371422" << endl;
    f << "1.06781057321187,-0.115944590259083,-12.7299902120822,24.4406736711232,973.348950565515" << endl;
    f << "0.906008891222665,-0.103046987893211,-12.3326760062058,37.2403375442781,1006.03638667734" << endl;
    f << "0.791051499652717,-0.0935787053174586,-11.9348760855023,46.7907095812802,1008.00838101071" << endl;
    f << "0.661413434271623,-0.0824547131294182,-11.3523522282848,57.8979050729595,984.108949307779" << endl;
    f << "0.468912678003718,-0.0646047561879912,-10.1664116002032,74.6818385083388,883.596972782418" << endl;
    f << "0.448657310144153,-0.0625974590212788,-10.0147334931953,76.439485426722,867.501816448262" << endl;
    f << "0.301279517696837,-0.0468855171793256,-8.71256345849655,88.9028513624401,709.87270356924" << endl;
    f << "0.0764013078899314,0.0157911986362662,5.67091590039564,104.416490771198,-264.059961534296" << endl;
    f << "0.302469303664115,0.0470219820062949,8.72468895590559,88.8058695987122,-711.471137356482" << endl;
    f << "0.514788467225795,0.0690460728070796,10.4892729342342,70.6842419089335,-915.801880892209" << endl;
    f << "0.576041368797739,0.0747777262540694,10.8791676331259,65.3324071764651,-950.338049458613" << endl;
    f << "0.801584151504194,0.0944597038442665,11.9757073535784,45.902352154531,-1008.66793544248" << endl;
    f << "1.01131941732619,0.111486736514683,12.6113132948914,28.814407162849,-988.298435902323" << endl;
    f << "1.78170870880839,0.171078178897851,12.7591115929524,-19.6933764747571,-580.510698168963" << endl;
    f << "2.01832591352253,0.189945085368035,12.294206214335,-29.0634000159769,-413.536089704494" << endl;
    f << "2.21510186985684,0.206288811455618,11.7701573967522,-34.6945848068096,-277.651358207407" << endl;
    f << "2.69783952002582,0.250411334593573,10.0715512144834,-40.2389439014152,2.06880983930634" << endl;
    f << "3.77708126936715,0.393785440500935,5.47000179001202,-21.7711691915784,121.895515245991" << endl;
    f << "3.84217185271994,0.405974097897088,5.21337147820434,-20.3654535042625,108.645176345156" << endl;
    f << "4.10515419405547,0.462034438643417,4.20879417105232,-16.0809114427439,43.862493282991" << endl;
    f << "4.10971191551194,0.463119590368436,4.19136952054175,-16.0339966756938,42.6043479038701" << endl;
    f << "4.19374016106317,0.48398721534971,3.86430277037719,-15.3965652061708,18.5224691179283" << endl;
    f << "4.22258728335691,0.491566371303712,3.74805842934082,-15.2891755247542,9.81822493632518" << endl;
    f << "4.40163201152561,0.545253611780536,2.91176339062732,-16.4183106806287,-52.0376335321454" << endl;
    f << "4.51810953244601,0.591719680623202,2.07322641605038,-20.0913046965608,-105.777061914026" << endl;
    f << "4.60874843856141,0.676494724521009,-0.108582952169211,-32.2283080597495,-161.738342931552" << endl;
    f << "4.60556698673541,0.68749803026681,-0.47290878816836,-33.9831110294496,-156.412132385966" << endl;
    f << "4.58984321054962,0.706871577140042,-1.15950175861728,-36.8229580510482,-133.609923136567" << endl;
    f << "4.47566355661086,0.759395782670583,-3.21707566709985,-39.94843053838,47.5448857354185" << endl;
    f << "4.137937541056,0.833689161519814,-5.59141364396234,-16.7282605555855,623.082706126629" << endl;
    f << "4.06795019160942,0.846015111719803,-5.74754749172586,-8.38766392362975,729.226481442513" << endl;
    f << "3.86118478125898,0.88212966363449,-5.51540651175804,22.6841884796176,966.068347744925" << endl;
    f << "3.84173438767475,0.885683507823483,-5.42866030480415,26.1420212666358,979.523868305897" << endl;
    f << "3.71136951730625,0.911904088009247,-4.39993709932731,52.417710708948,1000.16589924583" << endl;
    f << "3.66382801608767,0.92358119735608,-3.72040917708884,63.8886247794099,959.049223362592" << endl;
    f << "3.87778163924129,1.0449831458812,7.82358327698808,90.3755576403501,-687.227830850747" << endl;
    f << "4.13775631409942,1.07380526587664,10.1007332308871,66.3969061161282,-945.068086280396" << endl;
    f << "4.31876937084382,1.09085004307293,11.0914295334206,49.6796889215656,-1004.86316962461" << endl;
    f << "4.41495004150881,1.0993685075258,11.4780637901204,41.0897922530504,-1009.17262489811" << endl;
    f << "4.6807194194744,1.12178727264116,12.1486799622683,18.9652305400009,-948.446435462095" << endl;
    f << "4.94076950528479,1.14296272627977,12.346408358231,0.177843294821222,-816.394744514316" << endl;
    f << "4.98552094498343,1.1465878047206,12.3417488816327,-2.73179616076299,-788.694927127467" << endl;
    f << "5.34018429233882,1.17566018389698,11.9628796473273,-22.1197031922992,-539.683687313521" << endl;
    f << "5.75216507131031,1.21158951655157,10.8875116049814,-35.9178834085914,-236.674781097529" << endl;
    f << "5.92149805852631,1.22757705294165,10.2879973859885,-38.7807990278552,-124.50476894601" << endl;
    f << "6.37429912004083,1.27613716078293,8.36271116988949,-38.728705009314,96.4900163587773" << endl;
    f << "6.53051592630377,1.29568605898916,7.62706609006378,-36.3983644028355,137.998770768416" << endl;
    f << "6.65638414848365,1.31287819045099,7.02280857347798,-33.8421899349947,156.93911404326" << endl;
    f << "6.66898435932855,1.31468017647391,6.96208088152284,-33.5583018892835,158.121207274022" << endl;
    f << "7.09460810269681,1.38695679299381,4.95048813249449,-22.4935949680439,128.920381702128" << endl;
    f << "7.17184579819227,1.40313571849982,4.60270745671554,-20.544520538221,111.764939736616" << endl;
    f << "7.18947870784785,1.40699979666044,4.52414556776652,-20.120924117686,107.473921126525" << endl;
    f << "7.45949914587949,1.47628535664651,3.32432598150143,-15.4415060400468,27.3609042007943" << endl;
    f << "7.6373284318581,1.53871581427661,2.36702870368854,-15.9727323683232,-44.4691814587668" << endl;
    f << "7.72441871979264,1.58222842353253,1.61393924951804,-19.0092257088344,-95.0272422862804" << endl;
    f << "7.78247423404899,1.66312066241141,-0.327103705577505,-29.9277876929808,-162.355033094752" << endl;
    f << "7.77936529695484,1.67026194822142,-0.544973242414788,-31.0895951523097,-162.762864175309" << endl;
    f << "7.77859058506271,1.6716299961237,-0.587657579618167,-31.3121974955939,-162.657440631114" << endl;
    f << "7.76176621204807,1.6904830763928,-1.20659609345089,-34.3203334442766,-154.116757374445" << endl;
    f << "7.74490501363322,1.70240163005216,-1.62631297607294,-36.0837172208712,-140.61048493674" << endl;
    f << "7.66853039442702,1.73619749140369,-2.91367142930697,-39.6323190366537,-57.0715518975328" << endl;
    f << "7.45812365389526,1.7892697170719,-4.98181844997095,-35.6431104328852,243.439846492017" << endl;
    f << "7.44479544837818,1.79192011222158,-5.07540795516513,-34.9709234738154,263.868376629003" << endl;
    f << "7.11803957964037,1.84773645484656,-6.37289706801967,-6.99773637501022,743.437891356334" << endl;
    f << "6.93959153945441,1.87576570883048,-6.24897029282644,16.7481590093378,936.568300338183" << endl;
    f << "6.66134126727409,1.92749363654414,-4.06547437117131,67.7211387195838,937.870694842906" << endl;
    f << "6.55983838130922,1.97249757494534,-0.19723158852848,100.487422171066,448.519141065872" << endl;
    f << "6.57210111500203,1.98998950891102,1.61522219816047,105.929208438714,168.883112960017" << endl;

    f.close();
    DataSet ds = DataSet(fn);
    ds.load();

    ds.compute_app_der(3);

    RandInt ri = RandInt(42);
    RandReal rr = RandReal(42);
    RandInt::RANDINT = &ri;
    RandReal::RANDREAL = &rr;

    size_t params = 6;
    size_t depth = 0;
    setup_cont_frac_ivs(params);
    ModelType o = frac_1();

    /*

    // Output CSV for manual computation (performed to setup the initial test)

    cout << fixed << setprecision(15);
    cout << "m,y,x,fb_d,fb_dd,fb_ddd,fbw_d1_1,fbw_d1_2,fbw_d1_3,fbw_d2_1,fbw_d2_2,fbw_d2_3,fbw_d2_4,fbw_d2_5,fbw_d3_1,fbw_d3_2,fbw_d3_3,fbw_d3_4,fbw_d3_5,fbw_d3_6,fbw_d3_7" << endl;
    for( size_t i = 0; i < ds.get_count(); i++) {
        
        double val = o.evaluate(ds.samples[i]);
        cout << val << "," << ds.y[i] << ", " << ds.samples[i][0];
        cout << ", " << ds.Yder[0][i] << ", " << ds.Yder[1][i] << ", " << ds.Yder[2][i];

        // ' weights
        for( size_t j = 0; j < 3; j++) {
            if( ds.fd_weights[0][i].size() >= j+1 ) {
                cout << ", " << ds.fd_weights[0][i][j];
            } else {
                cout << ",";
            }
        }

        // '' weights
        for( size_t j = 0; j < 5; j++) {
            if( ds.fd_weights[1][i].size() >= j+1 ) {
                cout << ", " << ds.fd_weights[1][i][j];
            } else {
                cout << ",";
            }
        }

        // ''' weights
        for( size_t j = 0; j < 7; j++) {
            if( ds.fd_weights[2][i].size() >= j+1 ) {
                cout << ", " << ds.fd_weights[2][i][j];
            } else {
                cout << ",";
            }
        }

        cout << endl;
    }    

    */

    vector<vector<double>> fb_manual = {
        { 1626.34852967544, -74971.7608588331, 5169809.12199088 }, 
        { 1335.45606049315, -139534.832314968, -1.9055137075666E+173 }, 
        { 129.435489617441, 1.5508832085924E+171, 9.8430501001959E+172 }, 
        { 3.5982721900428E+168, 2.3957361870597E+171, -6.1916030898511E+172 }, 
        { 7.1874115102449E+168, 1.0522903931153E+171, -3.0058353389478E+173 }, 
        { -5.1979770468325E+167, 1.0825112228664E+170, 1.1916378607342E+173 }, 
        { -1.9510547140319E+168, -9.3078810175275E+169, 1.2529746570951E+172 }, 
        { -1.7379223484058E+168, 1.6040208289668E+170, 3.2817035656683E+171 }, 
        { -42.8662343615774, -1.0056817673296E+169, -6.5232193595839E+171 }, 
        { -47.840928325236, -5.3860873484461E+167, 1.9639526640564E+171 }, 
        { 1.8338710787214E+167, 2.1866818701288E+169, 4.09530978371E+170 }, 
        { -3.7923225090773E+167, -4.3705319842556E+169, 5.0026801747732E+170 }, 
        { -5.7780166296263E+167, 2.8460383148547E+169, 5.60201907979E+170 }, 
        { -11890.8896997316, -4.067129540886E+168, -6.7991676385704E+169 }, 
        { -6982.77597174112, 1182138.67507728, 5.8144925314308E+169 }, 
        { 3303.40888289986, -579440.768325876, 10772128.3265649 }, 
        { -61.7649106494418, 17994.2393632141, 12930371.1230568 }, 
        { -77.3021633776445, 4604.78917684058, -1016855.93292873 }, 
        { 14.6356373211897, -564.927941269703, -239319.818109429 }, 
        { 14.8134868603721, -3968.86349216547, -15151.9177494526 }, 
        { 177.161124142408, 10446.7204274115, -718709.374221426 }, 
        { 177.921271142171, -8570.14149550476, -1015583.73868219 }, 
        { 8.99636536282333, 5241.12678520151, -6510472.00222714 }, 
        { 14.403728200353, -320251.902173774, -1759795.16526773 }, 
        { 31206.0137517665, 846659.498253469, -222478901.145177 }, 
        { 10769.1407285949, -4259104.86360094, 157943057.275263 }, 
        { -7596.61615552793, 2995034.16254654, -25784767.6060991 }, 
        { 4577.98027942736, -1032266.70363303, -155529447.898751 }, 
        { -24.4402146517287, -60745.385954562, 56902790.1396837 }, 
        { -26573.5939639134, -876033.868134732, 116792876.60028 }, 
        { -12959.0189228811, 2756464.54953926, -2689664.16244084 }, 
        { 4732.82130066913, -3112424.0886684, -624950706.69479 }, 
        { -29551.1558372987, -9787328.30456271, 2405534789.3556 }, 
        { 26268.9379535436, 19356702.7204255, -1059547974.51408 }, 
        { 53378.6245592516, -11119445.6852726, -1596161546.56553 }, 
        { 14.2295482781907, 411852.125347411, 911857975.23761 }, 
        { -261.64166386549, -23045.7692443567, -54252012.0118828 }, 
        { -260.538874479216, 15128.1906168965, 6970478.94939789 }, 
        { 3.79438968772635, 12906.4241643941, -1858950.11352242 }, 
        { 4.65015356015982, -153.011095579158, -112395.441874834 }, 
        { 2.33278706708677, 312.652803514325, 1342772.54268258 }, 
        { 161.998014258626, 9088.3129164904, -2863160.62015294 }, 
        { 142.09599167116, -21444.8120452497, -1985584.70704712 }, 
        { -30.1740487833775, 7241.66869731638, 2299038.97466714 }, 
        { 11.4832162762198, 3473.39024627761, -413175.956367396 }, 
        { -179.019886010234, -3154.95546647033, 1444753.61240021 }, 
        { -10.6405881309955, 26595.7380240362, 201373.633833164 }, 
        { 145.095711853551, 1619.64981566863, -1375443.54081557 }, 
        { 8.51435169279886, -2035.11819586129, 341167.142931244 }, 
        { 168.202648332434, -1020.31870869598, -163920.501155236 }, 
        { 140.891715481271, -1459.33086536085, -1640619.5005491 }, 
        { -515.117140127102, 18599.2376528981, 3243257.22361106 }, 
        { -494.669768038324, 74893.4478205881, -71486.8831133023 }, 
        { 35.4173569880932, -26267.2258870208, -4202408.0488238 }, 
        { 19.9429458299568, -1834.01805773532, 512321.950840195 }, 
        { 5.13863182428162, 175.837569958692, -11012.4013157315 }, 
        { 4.67336640497876, -128.601992583406, -8100.61784494208 }, 
        { 5.72001623394613, 523.273607566072, 26627.9741074184 }, 
        { 11.4821015067556, 1109.86736814889, 135664.305399779 }, 
        { 5.69009473137891, 7449.56774787848, 160212.036195677 }, 
        { -2574.63024916606, -377987.463332279, 9316989.29094745 }, 
        { 31151.4068349675, 359652.980222672, -111529137.742752 }, 
        { 27841.1120070582, -2050098.79727399, 42794400.2374108 }, 
        { 91.6342833136505, 418925.109776457, -17926592.592172 }, 
        { 86.4932143143736, -9754.11343266665, -18344550.9633523 }, 
        { 40.479426504303, 8438.75081603034, 1060250.22578665 }, 
        { 60.3229827512279, 1527.34056538706, -3507660.3028219 }, 
        { 2.31254922379048, -422509.228806901, -123019863.350256 }, 
        { -20671.7792188165, -249143.287284343, 726114208.896394 }, 
        { 32919.8025635325, 7820643.78120523, -719307085.540279 }, 
        { 47705.5727423078, -3397135.49600815, -696097909.709345 }, 
        { -44.2068414624745, 719191.458889619, 232821436.093563 }, 
        { 485.017271635771, 54556.4770468128, -30937006.5042252 }, 
        { 525.711276287605, -9981.57703611447, -6788271.66215333 }, 
        { 3.64638905785529, 4099.40685102667, 2688774.69795486 }, 
        { 7.71716806756353, 335.517861481515, -263740.456059678 }, 
        { 8.15430930362054, 1196.29462907798, -124277.823659365 }, 
        { -140.41993538935, -4282.94511487077, 1323494.44221322 }, 
        { 12.1116951813619, 22651.7860901277, 641807.770271517 }, 
        { 419.15123587782, 24344.7925763301, -1410501.87009212 }, 
        { 419.188931412581, -7059.04849106539, -6131382.99101897 }, 
        { 1751.24511828172, -3589.29371730465, -15214838.7681479 }, 
        { 642.821137384597, -202942.068536257, -1971214.56175444 }, 
        { 243.592478448631, -126191.699301213, 7565644.6654585 }, 
        { 3.38112401858621, 1420.30078954813, -1732623.23293937 }, 
        { 5.14530620076874, 75.0083830830086, -28418.5787024547 }, 
        { 4.71909063351708, -113.458430049865, -97452.5380976275 }, 
        { 1.54957050819348, 6941.02715459187, -173858.568117741 }, 
        { 35.7886926592118, 7438.15348431355, -1851665.24885049 }, 
        { 39.6742991199965, 1925.70878973333, -1972523.53503513 }, 
        { 6.94643673679673, 1548.59882200027, 979634.451437369 }, 
        { 8.51712932587945, -54.2568027601961, -140525.950835575 }, 
        { 3.93656011289941, -797.955533810833, 24585.6083130508 }, 
        { 61.1809717669666, 1680.89681424358, -155990.307702764 }, 
        { 61.3831791578521, -1467.63947933278, -161454.266594196 }, 
        { 5.18928514573116, 793.106247789593, 47310.8931613285 }, 
        { 5.50804209057752, -74.1908859584681, 1944094.21659787 }, 
        { 2.83784428376526, 79171.9157996507, -6648303.27120739 }, 
        { -16159.8568974664, -891239.973495229, -35339762.5162817 }, 
        { -22441.6412876286, -718249.268775809, -18863478.863366 }
    };

    // 100% of samples
    vector<size_t> selected;
    vector<vector<double>> res = objective::fornberg2(&o, &ds, selected);

    for( size_t i = 0; i < res[0].size(); i++) {

        // As numbers can be very large, and cause numerical issues,
        // we take the relative error in the number. See excel in fornberg-test repo
        CHECK( (res[1][i]-fb_manual[i][0])/res[1][i] == doctest::Approx(0).epsilon(1e-5) );
        CHECK( (res[2][i]-fb_manual[i][1])/res[2][i] == doctest::Approx(0).epsilon(1e-5) );
        CHECK( (res[3][i]-fb_manual[i][2])/res[3][i] == doctest::Approx(0).epsilon(1e-5) );
    }

    /* Output for excel comparison in case you're a masochist
    cout << fixed << setprecision(15);
    cout << "fb_d1,fb_d2,fb_d3" << endl;
    for( size_t i = 0; i < res[0].size(); i++) {
        cout << res[1][i] << ", " << res[2][i] << ", " << res[3][i] << endl;
    }
    */

}

TEST_CASE("Objective: mse_der ") {

    /* 
     * We utilise the Ackley 100 samples and compute the fornberg weights
     * We export those weights and manually calculate the differences in excel
     * We input the computed derivative predictions for the new CF model 
     * and compare these with what is caculated by the objective::fornberg()
     * 
     * Due to the large volumes, we must check the relative difference to be
     * very small, as the actual differences for 10^200 between excel and c++
     * are extreme, but still a fraction of a percent when considering the
     * differences relative to the magnitude of data
     * 
     */

    RandInt ri = RandInt(42);
    RandReal rr = RandReal(42);
    RandInt::RANDINT = &ri;
    RandReal::RANDREAL = &rr;

    ModelType::IVS.clear();
    ModelType::IVS.push_back("x1");

    // t1(x) =  x1 - 20
    // t2(x) = -3x1 - 3
    // t3(x) =  x1 - 20
    // f(x) = t1(x) + t2(x) / t3(x) = (x^2-40x+397)/(x-20)
    ModelType m = build_cont_frac(
        {
            true, true,
            false, true,
            true, true
        },
        {
            1, -20,
            0, -3,
            1, -20
        },
        {   true, true },
        2,
        1
    );

    // Load data with known derivative
    string fn("test_data.csv");
    ofstream f;
    f.open(fn);
    if (!f.is_open())
        throw runtime_error("Unable to open file "+ fn);

    // Write the header
    f << "y,x,yd,ydd,yddd" << endl;
    // In excel, we can use the following to build the string =CONCAT("f << """, A2,",",B2,",",C2,",",D2,",",E2, """ << endl;")
    // This is the Ackley 100 samples data
    f << "3.5779985988974,-0.976908981345251,-0.84659689813977,102.198510798502,-380.934495728811" << endl;
    f << "3.5744740824253,-0.969148927003456,-0.066196622253277,98.7825398776912,-498.141776467768" << endl;
    f << "3.66255853785587,-0.923923424750924,3.69848861082895,64.2165472698516,-957.347207270611" << endl;
    f << "3.67423578346107,-0.920847025073935,3.89149066763942,61.248812032798,-971.625972053372" << endl;
    f << "3.69091955233745,-0.916692607242046,4.13751108578498,57.178330979337,-987.270976361419" << endl;
    f << "3.82373490789497,-0.889027194136539,5.33575329763218,29.4354632764644,-990.072983930931" << endl;
    f << "4.089846246331,-0.842193654338596,5.71024766614384,-11.1130765680727,-697.016939466085" << endl;
    f << "4.16293436879655,-0.829186593079273,5.50991219836211,-19.4439772949013,-583.157728705626" << endl;
    f << "4.28572856226068,-0.80572152129487,4.912262330062,-30.6859856923646,-376.626296640075" << endl;
    f << "4.4118800915332,-0.777262017601174,3.91773331395273,-38.1599484483296,-156.775510722092" << endl;
    f << "4.49894703594448,-0.751799162121505,2.91261552213449,-40.1590926623421,-8.67685557345618" << endl;
    f << "4.60208817774286,-0.693533417307138,0.680830222436794,-34.9125272537386,151.299098168267" << endl;
    f << "4.60530620418078,-0.6577630452412,-0.466611985796209,-29.1881530808044,161.057453552093" << endl;
    f << "4.54678402730559,-0.606661846067897,-1.76059451328056,-21.7949108272171,122.077308035906" << endl;
    f << "4.50584176052727,-0.585961502778545,-2.18719796156207,-19.5009197415822,99.2668754149997" << endl;
    f << "4.41615458802327,-0.550313750771967,-2.8279931175868,-16.6965273969846,57.9279794125431" << endl;
    f << "4.36171509419283,-0.532031287123978,-3.12475029417214,-15.8317466352207,36.6999885841963" << endl;
    f << "4.31855928305068,-0.518668497696744,-3.333489263484,-15.444404957671,21.2870043754433" << endl;
    f << "4.19345052978551,-0.483912276075844,-3.86545662988452,-15.3979564944258,-18.6086156943461" << endl;
    f << "4.16591692778392,-0.476887872970988,-3.97414362176646,-15.5570531380264,-26.6928937029467" << endl;
    f << "4.00289452989895,-0.438794704893315,-4.59678640048956,-17.4143158389072,-70.9159224174217" << endl;
    f << "3.97349407991919,-0.432475147934399,-4.70830227291854,-17.8857472901093,-78.279503960007" << endl;
    f << "3.74218191762642,-0.387485236755882,-5.60962732883914,-22.5598103104708,-128.413410984917" << endl;
    f << "3.68168885489813,-0.376930050154756,-5.85509787318969,-23.9699857399523,-138.617976448303" << endl;
    f << "3.31569518987312,-0.32144766812631,-7.41855348075094,-32.6121872352529,-161.394061118842" << endl;
    f << "3.17725647996686,-0.303514063827696,-8.02885450785697,-35.4116370851457,-148.462713791342" << endl;
    f << "2.94620433825848,-0.276413371582682,-9.03809820884115,-38.8391650611293,-97.2732011035598" << endl;
    f << "2.76963492116935,-0.257644314163112,-9.78084182617149,-40.1074285864942,-33.6217555330013" << endl;
    f << "2.64659581116728,-0.245374049466792,-10.2741714732946,-40.1887819110067,22.31777436336" << endl;
    f << "1.9482522506765,-0.184282210854747,-12.4518944401306,-26.5817902492202,463.059840169585" << endl;
    f << "1.65114679206734,-0.160916761564189,-12.9277040775496,-13.3378705187714,669.98919629096" << endl;
    f << "1.18170105374393,-0.124824364030686,-12.9091272906545,15.965952897748,933.240693371422" << endl;
    f << "1.06781057321187,-0.115944590259083,-12.7299902120822,24.4406736711232,973.348950565515" << endl;
    f << "0.906008891222665,-0.103046987893211,-12.3326760062058,37.2403375442781,1006.03638667734" << endl;
    f << "0.791051499652717,-0.0935787053174586,-11.9348760855023,46.7907095812802,1008.00838101071" << endl;
    f << "0.661413434271623,-0.0824547131294182,-11.3523522282848,57.8979050729595,984.108949307779" << endl;
    f << "0.468912678003718,-0.0646047561879912,-10.1664116002032,74.6818385083388,883.596972782418" << endl;
    f << "0.448657310144153,-0.0625974590212788,-10.0147334931953,76.439485426722,867.501816448262" << endl;
    f << "0.301279517696837,-0.0468855171793256,-8.71256345849655,88.9028513624401,709.87270356924" << endl;
    f << "0.0764013078899314,0.0157911986362662,5.67091590039564,104.416490771198,-264.059961534296" << endl;
    f << "0.302469303664115,0.0470219820062949,8.72468895590559,88.8058695987122,-711.471137356482" << endl;
    f << "0.514788467225795,0.0690460728070796,10.4892729342342,70.6842419089335,-915.801880892209" << endl;
    f << "0.576041368797739,0.0747777262540694,10.8791676331259,65.3324071764651,-950.338049458613" << endl;
    f << "0.801584151504194,0.0944597038442665,11.9757073535784,45.902352154531,-1008.66793544248" << endl;
    f << "1.01131941732619,0.111486736514683,12.6113132948914,28.814407162849,-988.298435902323" << endl;
    f << "1.78170870880839,0.171078178897851,12.7591115929524,-19.6933764747571,-580.510698168963" << endl;
    f << "2.01832591352253,0.189945085368035,12.294206214335,-29.0634000159769,-413.536089704494" << endl;
    f << "2.21510186985684,0.206288811455618,11.7701573967522,-34.6945848068096,-277.651358207407" << endl;
    f << "2.69783952002582,0.250411334593573,10.0715512144834,-40.2389439014152,2.06880983930634" << endl;
    f << "3.77708126936715,0.393785440500935,5.47000179001202,-21.7711691915784,121.895515245991" << endl;
    f << "3.84217185271994,0.405974097897088,5.21337147820434,-20.3654535042625,108.645176345156" << endl;
    f << "4.10515419405547,0.462034438643417,4.20879417105232,-16.0809114427439,43.862493282991" << endl;
    f << "4.10971191551194,0.463119590368436,4.19136952054175,-16.0339966756938,42.6043479038701" << endl;
    f << "4.19374016106317,0.48398721534971,3.86430277037719,-15.3965652061708,18.5224691179283" << endl;
    f << "4.22258728335691,0.491566371303712,3.74805842934082,-15.2891755247542,9.81822493632518" << endl;
    f << "4.40163201152561,0.545253611780536,2.91176339062732,-16.4183106806287,-52.0376335321454" << endl;
    f << "4.51810953244601,0.591719680623202,2.07322641605038,-20.0913046965608,-105.777061914026" << endl;
    f << "4.60874843856141,0.676494724521009,-0.108582952169211,-32.2283080597495,-161.738342931552" << endl;
    f << "4.60556698673541,0.68749803026681,-0.47290878816836,-33.9831110294496,-156.412132385966" << endl;
    f << "4.58984321054962,0.706871577140042,-1.15950175861728,-36.8229580510482,-133.609923136567" << endl;
    f << "4.47566355661086,0.759395782670583,-3.21707566709985,-39.94843053838,47.5448857354185" << endl;
    f << "4.137937541056,0.833689161519814,-5.59141364396234,-16.7282605555855,623.082706126629" << endl;
    f << "4.06795019160942,0.846015111719803,-5.74754749172586,-8.38766392362975,729.226481442513" << endl;
    f << "3.86118478125898,0.88212966363449,-5.51540651175804,22.6841884796176,966.068347744925" << endl;
    f << "3.84173438767475,0.885683507823483,-5.42866030480415,26.1420212666358,979.523868305897" << endl;
    f << "3.71136951730625,0.911904088009247,-4.39993709932731,52.417710708948,1000.16589924583" << endl;
    f << "3.66382801608767,0.92358119735608,-3.72040917708884,63.8886247794099,959.049223362592" << endl;
    f << "3.87778163924129,1.0449831458812,7.82358327698808,90.3755576403501,-687.227830850747" << endl;
    f << "4.13775631409942,1.07380526587664,10.1007332308871,66.3969061161282,-945.068086280396" << endl;
    f << "4.31876937084382,1.09085004307293,11.0914295334206,49.6796889215656,-1004.86316962461" << endl;
    f << "4.41495004150881,1.0993685075258,11.4780637901204,41.0897922530504,-1009.17262489811" << endl;
    f << "4.6807194194744,1.12178727264116,12.1486799622683,18.9652305400009,-948.446435462095" << endl;
    f << "4.94076950528479,1.14296272627977,12.346408358231,0.177843294821222,-816.394744514316" << endl;
    f << "4.98552094498343,1.1465878047206,12.3417488816327,-2.73179616076299,-788.694927127467" << endl;
    f << "5.34018429233882,1.17566018389698,11.9628796473273,-22.1197031922992,-539.683687313521" << endl;
    f << "5.75216507131031,1.21158951655157,10.8875116049814,-35.9178834085914,-236.674781097529" << endl;
    f << "5.92149805852631,1.22757705294165,10.2879973859885,-38.7807990278552,-124.50476894601" << endl;
    f << "6.37429912004083,1.27613716078293,8.36271116988949,-38.728705009314,96.4900163587773" << endl;
    f << "6.53051592630377,1.29568605898916,7.62706609006378,-36.3983644028355,137.998770768416" << endl;
    f << "6.65638414848365,1.31287819045099,7.02280857347798,-33.8421899349947,156.93911404326" << endl;
    f << "6.66898435932855,1.31468017647391,6.96208088152284,-33.5583018892835,158.121207274022" << endl;
    f << "7.09460810269681,1.38695679299381,4.95048813249449,-22.4935949680439,128.920381702128" << endl;
    f << "7.17184579819227,1.40313571849982,4.60270745671554,-20.544520538221,111.764939736616" << endl;
    f << "7.18947870784785,1.40699979666044,4.52414556776652,-20.120924117686,107.473921126525" << endl;
    f << "7.45949914587949,1.47628535664651,3.32432598150143,-15.4415060400468,27.3609042007943" << endl;
    f << "7.6373284318581,1.53871581427661,2.36702870368854,-15.9727323683232,-44.4691814587668" << endl;
    f << "7.72441871979264,1.58222842353253,1.61393924951804,-19.0092257088344,-95.0272422862804" << endl;
    f << "7.78247423404899,1.66312066241141,-0.327103705577505,-29.9277876929808,-162.355033094752" << endl;
    f << "7.77936529695484,1.67026194822142,-0.544973242414788,-31.0895951523097,-162.762864175309" << endl;
    f << "7.77859058506271,1.6716299961237,-0.587657579618167,-31.3121974955939,-162.657440631114" << endl;
    f << "7.76176621204807,1.6904830763928,-1.20659609345089,-34.3203334442766,-154.116757374445" << endl;
    f << "7.74490501363322,1.70240163005216,-1.62631297607294,-36.0837172208712,-140.61048493674" << endl;
    f << "7.66853039442702,1.73619749140369,-2.91367142930697,-39.6323190366537,-57.0715518975328" << endl;
    f << "7.45812365389526,1.7892697170719,-4.98181844997095,-35.6431104328852,243.439846492017" << endl;
    f << "7.44479544837818,1.79192011222158,-5.07540795516513,-34.9709234738154,263.868376629003" << endl;
    f << "7.11803957964037,1.84773645484656,-6.37289706801967,-6.99773637501022,743.437891356334" << endl;
    f << "6.93959153945441,1.87576570883048,-6.24897029282644,16.7481590093378,936.568300338183" << endl;
    f << "6.66134126727409,1.92749363654414,-4.06547437117131,67.7211387195838,937.870694842906" << endl;
    f << "6.55983838130922,1.97249757494534,-0.19723158852848,100.487422171066,448.519141065872" << endl;
    f << "6.57210111500203,1.98998950891102,1.61522219816047,105.929208438714,168.883112960017" << endl;

    f.close();
    DataSet ds = DataSet(fn);
    ds.load();

    ds.compute_app_der(3);

    ds.normalise();

    /*

    // Output CSV for manual computation (performed to setup the initial test)

    cout << fixed << setprecision(15);
    cout << "m,y,x,fb_d,fb_dd,fb_ddd,fbw_d1_1,fbw_d1_2,fbw_d1_3,fbw_d2_1,fbw_d2_2,fbw_d2_3,fbw_d2_4,fbw_d2_5,fbw_d3_1,fbw_d3_2,fbw_d3_3,fbw_d3_4,fbw_d3_5,fbw_d3_6,fbw_d3_7" << endl;
    for( size_t i = 0; i < ds.get_count(); i++) {
        
        double val = m.evaluate(ds.samples[i]);
        cout << val << "," << ds.y[i] << ", " << ds.samples[i][0];
        cout << ", " << ds.Yder[0][i] << ", " << ds.Yder[1][i] << ", " << ds.Yder[2][i];

        // ' weights
        for( size_t j = 0; j < 3; j++) {
            if( ds.fd_weights[0][i].size() >= j+1 ) {
                cout << ", " << ds.fd_weights[0][i][j];
            } else {
                cout << ",";
            }
        }

        // '' weights
        for( size_t j = 0; j < 5; j++) {
            if( ds.fd_weights[1][i].size() >= j+1 ) {
                cout << ", " << ds.fd_weights[1][i][j];
            } else {
                cout << ",";
            }
        }

        // ''' weights
        for( size_t j = 0; j < 7; j++) {
            if( ds.fd_weights[2][i].size() >= j+1 ) {
                cout << ", " << ds.fd_weights[2][i][j];
            } else {
                cout << ",";
            }
        }

        cout << endl;
    }    
    
    */

    // 100% of samples
    vector<size_t> selected;
    vector<vector<double>> res = objective::derivative(&m, &ds, selected);

    vector<vector<double>> derv = {
        { -20.8338945838156, 1.00682022899264, 0.00065190721579711, 9.34973359107971E-05 },
        { -20.8260816041262, 1.00682275841943, 0.000650737580144778, 9.57697629928589E-05 },
        { -20.7805468725097, 1.00685228075872, 0.000654967967420816, 9.37784789130092E-05 },
        { -20.7774493893852, 1.00685429417081, 0.000655247376698753, 9.40309582802001E-05 },
        { -20.7732664902965, 1.00685701880185, 0.000655649574127892, 9.46393702179193E-05 },
        { -20.7454111237413, 1.00687521232655, 0.000658258493785979, 0.000094348859420279 },
        { -20.6982548708422, 1.00690613413303, 0.000662706204821006, 9.53980488702655E-05 },
        { -20.6851579251044, 1.00691475726637, 0.000663948488636379, 9.56333242356777E-05 },
        { -20.6615304151643, 1.00693036905602, 0.00066619773315324, 9.60578272497514E-05 },
        { -20.6328734067505, 1.00694936864596, 0.000668938376463757, 9.65481813182123E-05 },
        { -20.6072333836768, 1.00696644546863, 0.000671404184686253, 9.70784603850916E-05 },
        { -20.5485605922461, 1.0070057407288, 0.000677091279143838, 9.81581979431212E-05 },
        { -20.5125391895202, 1.00703001955708, 0.000680614730299567, 9.88424144452438E-05 },
        { -20.4610778585977, 1.0070649167111, 0.000685690749378409, 9.98303876258433E-05 },
        { -20.4402311224125, 1.00707912692286, 0.000687761271365162, 0.000100239180028439 },
        { -20.4043305781361, 1.00710370651632, 0.000691346785060887, 0.000100897072115913 },
        { -20.3859181257885, 1.0071163560923, 0.000693195007897884, 0.000101280864328146 },
        { -20.3724601801182, 1.00712563191146, 0.000694550384650938, 0.000101557707239408 },
        { -20.3374558785104, 1.00714982963473, 0.00069809227670703, 0.00010220380499959 },
        { -20.3303812349207, 1.00715473623856, 0.000698809861205518, 0.000102321508165915 },
        { -20.292015012484, 1.00718143016184, 0.000702724914390274, 0.000103172031231225 },
        { -20.2856500580576, 1.00718587391389, 0.000703377572790487, 0.000103281291103485 },
        { -20.2403361418497, 1.00721762693797, 0.000708043785380141, 0.000104208214906976 },
        { -20.2297047324736, 1.00722510826366, 0.000709145086148055, 0.000104429966086172 },
        { -20.1738203903361, 1.00726462185014, 0.000714969212822325, 0.000105599407106638 },
        { -20.1557563904235, 1.00727745193296, 0.00071686590945319, 0.000105937477201223 },
        { -20.128458210824, 1.00729691888944, 0.000719743538866169, 0.000106508472526912 },
        { -20.109552070392, 1.00731044165275, 0.00072174587945284, 0.000106909086753149 },
        { -20.0971920503261, 1.0073193150404, 0.000723059300071327, 0.000107134766949457 },
        { -20.0356517087313, 1.00736370113998, 0.000729644864577494, 0.000108422478660941 },
        { -20.0121140044534, 1.00738076883428, 0.000732184289518045, 0.000108929816633463 },
        { -19.9757547400809, 1.00740725677974, 0.000736130743462127, 0.000109842978417873 },
        { -19.9668091625619, 1.00741379402973, 0.000737108832254307, 0.000109929125756025 },
        { -19.9538158787082, 1.00742331022707, 0.000738525470296736, 0.000110371271148324 },
        { -19.9442772770354, 1.00743030743172, 0.000739569738470891, 0.000110775232315063 },
        { -19.9330705844034, 1.00743854296513, 0.000740799703635275, 0.000110666966065764 },
        { -19.9150877317335, 1.00745178087709, 0.000742779440770391, 0.000110746355858282 },
        { -19.9130654751329, 1.00745327200156, 0.000742999822307411, 0.000109823109539775 },
        { -19.8972363361417, 1.00746497746238, 0.00074475025371612, 0.000111729619675316 },
        { -19.8340902737893, 1.00751189420146, 0.000751779192341928, 0.00011283066123724 },
        { -19.8026245220246, 1.00753540426319, 0.000755315212700225, 0.000113571528345346 },
        { -19.7804342876935, 1.00755205636324, 0.000757819943828508, 0.000113942893221974 },
        { -19.7746593360389, 1.00755640154748, 0.000758475040129269, 0.000114103146188427 },
        { -19.7548284865104, 1.00757135625952, 0.000760727674332884, 0.000114601964014582 },
        { -19.7376724258492, 1.00758433892811, 0.000762683353059401, 0.000115074799396098 },
        { -19.677627664664, 1.00762999569667, 0.000769580150517868, 0.000116448070912156 },
        { -19.658616667089, 1.0076445202792, 0.000771781142788086, 0.000116879241659262 },
        { -19.6421478979909, 1.00765715779326, 0.000773694507351763, 0.000117252482855601 },
        { -19.597686767558, 1.00769152090048, 0.000778891562731587, 0.000118302906230383 },
        { -19.4532018506512, 1.00780433159775, 0.000796104564869893, 0.000121829565614462 },
        { -19.4409180101878, 1.00781402279338, 0.000797591172158718, 0.000121903605759144 },
        { -19.3844183565271, 1.00785891590203, 0.000804477822384797, 0.000123746460303664 },
        { -19.3833246762136, 1.00785978819074, 0.00080462712503504, 0.000123483237985056 },
        { -19.3622928607547, 1.00787660826381, 0.000807189684991272, 0.000123685142170871 },
        { -19.35465398359, 1.0078827348539, 0.000808135014267464, 0.000124396460705611 },
        { -19.3005423734183, 1.00792634495207, 0.000814844024233707, 0.000125621561892331 },
        { -19.253707119143, 1.00796437486207, 0.000820710656626034, 0.000126861035823822 },
        { -19.1682539400079, 1.0080343457189, 0.000831559995276621, 0.000129108289002033 },
        { -19.1571621797514, 1.00804348805076, 0.000832981865301008, 0.00012940143369633 },
        { -19.1376326455942, 1.0080596676523, 0.00083549384453363, 0.000129931068840961 },
        { -19.0846839579594, 1.00810379461061, 0.000842354842461646, 0.000131320681248326 },
        { -19.0097861934777, 1.00816667512527, 0.000852188604767434, 0.000133381690829992 },
        { -18.9973595167192, 1.00817717893972, 0.000853834819281474, 0.000133782043121755 },
        { -18.9609490921465, 1.008208095177, 0.000858682795296772, 0.000134743866510689 },
        { -18.9573660722529, 1.00821114687993, 0.000859162268170621, 0.000134950943618151 },
        { -18.9309298953366, 1.008233725845, 0.00086270719537751, 0.000135627665258653 },
        { -18.9191565811003, 1.00824383440917, 0.00086429255816256, 0.000135912094265223 },
        { -18.7967474089851, 1.00834982000958, 0.000881005791598, 0.000139421550557017 },
        { -18.7676842653183, 1.00837520104972, 0.000885036821273388, 0.00014029408339411 },
        { -18.7504966062035, 1.00839029863596, 0.000887431625869795, 0.000140736636240035 },
        { -18.7419066371065, 1.00839786439826, 0.000888633056092658, 0.000141079071909189 },
        { -18.7192993787634, 1.00841782866485, 0.000891801653779112, 0.000141720345709473 },
        { -18.6979454738551, 1.00843673543568, 0.000894811138095974, 0.000142267264891416 },
        { -18.6942898057126, 1.00843998079405, 0.000895326310455857, 0.000142419099574909 },
        { -18.6649716773365, 1.00846609285034, 0.000899481086889864, 0.000143565006510471 },
        { -18.6287375828247, 1.00849849221129, 0.000904651247992661, 0.000144454766996205 },
        { -18.6126140609885, 1.0085129788104, 0.000906964475689165, 0.000144926481880248 },
        { -18.563639490768, 1.00855719692959, 0.00091403959231684, 0.000146418809890747 },
        { -18.5439231344054, 1.0085750785197, 0.000916908131330274, 0.000147300821481622 },
        { -18.5265834435783, 1.00859085643242, 0.000919445564022681, 0.000147568760439754 },
        { -18.5247659754606, 1.00859251595931, 0.00091970864968971, 0.000147482380270958 },
        { -18.4518659096327, 1.00865940286724, 0.000930463487748057, 0.000149897872688598 },
        { -18.4355467628804, 1.00867444884034, 0.000932895089022168, 0.00015048498789838 },
        { -18.4316491590115, 1.00867805990286, 0.000933475891713442, 0.000150538489833707 },
        { -18.3617600863026, 1.00874320302739, 0.000943989057418548, 0.000152898407577595 },
        { -18.2987819475356, 1.00880239589333, 0.000953598483700802, 0.00015496026026085 },
        { -18.2548854212372, 1.00884405847702, 0.000960373232373968, 0.000156495720148087 },
        { -18.1732746181175, 1.00892218334002, 0.000973152462393045, 0.000159442890435457 },
        { -18.1660695917315, 1.00892912184281, 0.000974257738562301, 0.000158892478793859 },
        { -18.1646893274514, 1.00893045528305, 0.000974496413618908, 0.00016143437824212 },
        { -18.1456677072397, 1.00894886123012, 0.000977507724940097, 0.000159932130372908 },
        { -18.1336424266953, 1.00896052790438, 0.000979420087219296, 0.000160807918291539 },
        { -18.0995431765876, 1.00899375779588, 0.000984866783255711, 0.000161776812092285 },
        { -18.0459922436847, 1.00904621104928, 0.000993502463643381, 0.000163602046086453 },
        { -18.0433178690213, 1.0090488450128, 0.000993936126633344, 0.000163677484806612 },
        { -17.9869949001418, 1.00910461817068, 0.00100313432111676, 0.000165803641721141 },
        { -17.9587100570526, 1.00913279772254, 0.00100779498529846, 0.000166818063007668 },
        { -17.906508358549, 1.00918517798749, 0.00101647347401013, 0.000168733531609178 },
        { -17.8610900219793, 1.00923105162656, 0.00102409936516779, 0.000170404789969325 },
        { -17.8434364626349, 1.00923999479051, 0.00102254718512995, 0.000169257516972721 }
    };

    for( size_t i = 0; i < res[0].size(); i++) {

        CHECK( res[0][i] == doctest::Approx(derv[i][0]).epsilon(1e-5) );
        CHECK( res[1][i] == doctest::Approx(derv[i][1]).epsilon(1e-5) );
        CHECK( res[2][i] == doctest::Approx(derv[i][2]).epsilon(1e-5) );
        CHECK( res[3][i] == doctest::Approx(derv[i][3]).epsilon(1e-5) );

    }

    // See manual generation in derviatve_test sheet 
    double der = objective::mse_der(&m, &ds, selected);
    CHECK(der == doctest::Approx(2.3973849854).epsilon(1e-10) );

}
